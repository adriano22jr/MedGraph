{"version":3,"file":"on-worker.js","sourceRoot":"","sources":["../src/on-worker.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,6BAA6B,EAAE,MAAM,oBAAoB,CAAC;AACnE,OAAO,EAAE,aAAa,EAAE,MAAM,WAAW,CAAC;AAW1C;;;GAGG;AACH,MAAM,UAAU,gCAAgC,CAAC,OAEhD;IACC,MAAM,OAAO,GAAG,aAAa,EAAE,CAAC;IAChC,OAAO,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE;QACtC,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC;QAC5C,IAAI,IAA+B,CAAC;QACpC,IAAI,CAAe,CAAC;QACpB,IAAI,IAAI,KAAK,6BAA6B,IAAI,MAAM,EAAE;YACpD,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE;gBAC5B,CAAC,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;aACtD;iBAAM;gBACL,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;aACtC;YACD,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;gBACd,OAAO,CAAC,WAAW,CACjB,EAAE,IAAI,EAAE,6BAA6B,EAAE,EAAE,EAAE,MAAM,EAAE,EACnD,IAAI,CAAC,2BAA2B,CAAC,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CACjF,CAAC;YACJ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;gBACX,IAAI,OAAO,CAAC;gBACZ,IAAI;oBACF,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;iBAChC;gBACD,OAAO,EAAE,EAAE;oBACT,OAAO,GAAG,IAAI,CAAC;iBAChB;gBACD,MAAM,KAAK,GAAQ,EAAE,OAAO,EAAE,CAAC;gBAC/B,IAAI,CAAC,CAAC,KAAK,EAAE;oBACX,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;oBACtB,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;iBACrB;gBACD,IAAI,CAAC,CAAC,MAAM,EAAE;oBACZ,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;oBACxB,KAAK,CAAC,YAAY,GAAG,CAAC,CAAC,YAAY,CAAC;iBACrC;gBACD,OAAO,CAAC,WAAW,CAAC;oBAClB,IAAI,EAAE,6BAA6B;oBACnC,EAAE;oBACF,KAAK;iBACN,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;SACJ;IACH,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { MESSAGE_TYPE_RPC_TRANSFERABLE } from './message-types.js';\nimport { getGlobalThis } from './util.js';\n\n/** Options for worker method result */\nexport type WorkerMethodResultOptions = {\n  /** worker method */\n  fn: (...params: any[]) => any;\n\n  /** pick transferables from method result */\n  pickTransferablesFromResult?: (result: any) => any[];\n};\n\n/**\n * Setup worker methods which return transferables. This function should be executed on the worker thread.\n * @param methods an object whose key is method name and whose value is options how to pick transferables from method result\n */\nexport function setupTransferableMethodsOnWorker(methods: {\n  [x: string]: WorkerMethodResultOptions;\n}) {\n  const globals = getGlobalThis();\n  globals.addEventListener('message', e => {\n    const { type, method, id, params } = e.data;\n    let opts: WorkerMethodResultOptions;\n    let p: Promise<any>;\n    if (type === MESSAGE_TYPE_RPC_TRANSFERABLE && method) {\n      if ((opts = methods[method])) {\n        p = Promise.resolve().then(() => opts.fn(...params));\n      } else {\n        p = Promise.reject('No such method');\n      }\n      p.then(result => {\n        globals.postMessage(\n          { type: MESSAGE_TYPE_RPC_TRANSFERABLE, id, result },\n          opts.pickTransferablesFromResult ? opts.pickTransferablesFromResult(result) : []\n        );\n      }).catch(e => {\n        let message;\n        try {\n          message = e.message.toString();\n        }\n        catch (ex) {\n          message = null;\n        }\n        const error: any = { message };\n        if (e.stack) {\n          error.stack = e.stack;\n          error.name = e.name;\n        }\n        if (e.status) {\n          error.status = e.status;\n          error.responseJson = e.responseJson;\n        }\n        globals.postMessage({\n          type: MESSAGE_TYPE_RPC_TRANSFERABLE,\n          id,\n          error\n        });\n      });\n    }\n  });\n}\n"]}