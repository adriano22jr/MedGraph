{"version":3,"file":"on-main.js","sourceRoot":"","sources":["../src/on-main.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,6BAA6B,EAAE,MAAM,oBAAoB,CAAC;AAWnE;;;;GAIG;AACH,MAAM,UAAU,8BAA8B,CAC5C,MAAc,EACd,OAEC;IAED,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,MAAM,SAAS,GAEX,EAAE,CAAC;IACP,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE;QACrC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;QACjB,IAAI,CAAC,CAAC,IAAI,KAAK,6BAA6B,EAAE;YAC5C,OAAO;SACR;QACD,MAAM,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QAC1B,IAAI,CAAC,EAAE;YACL,OAAO,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACvB,IAAI,CAAC,CAAC,KAAK,EAAE;gBACX,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;aACtD;iBAAM;gBACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;aAChB;SACF;IACH,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;QACnC,MAAc,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAa,EAAE,EAAE,CAC7C,IAAI,OAAO,CAAC,CAAC,CAAU,EAAE,CAAS,EAAE,EAAE;YACpC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;YACf,SAAS,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACvB,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;YAC7B,MAAM,CAAC,WAAW,CAChB,EAAE,IAAI,EAAE,6BAA6B,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,EAC3D,IAAI,CAAC,2BAA2B,CAAC,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CACjF,CAAC;QACJ,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { MESSAGE_TYPE_RPC_TRANSFERABLE } from './message-types.js';\n\ntype Resolve = (value?: unknown) => void;\ntype Reject = (reason?: any) => void;\n\n/** Options for worker method params */\nexport type WorkerMethodParamsOptions = {\n  /** pick transferables from method params */\n  pickTransferablesFromParams?: (params: any) => any[];\n};\n\n/**\n * Setup worker methods which receive transferables from worker method params. This function should be executed on the main thread.\n * @param worker worker instance\n * @param methods an object whose key is method name and whose value is options how to pick transferables from method params\n */\nexport function setupTransferableMethodsOnMain<WORKER extends Worker>(\n  worker: WORKER,\n  methods: {\n    [x: string]: WorkerMethodParamsOptions;\n  }\n) {\n  let c = 0;\n  const callbacks: {\n    [x: number]: [Resolve, Reject];\n  } = {};\n  worker.addEventListener('message', e => {\n    const d = e.data;\n    if (d.type !== MESSAGE_TYPE_RPC_TRANSFERABLE) {\n      return;\n    }\n    const f = callbacks[d.id];\n    if (f) {\n      delete callbacks[d.id];\n      if (d.error) {\n        f[1](Object.assign(Error(d.error.message), d.error));\n      } else {\n        f[0](d.result);\n      }\n    }\n  });\n  Object.keys(methods).forEach(method => {\n    (worker as any)[method] = (...params: any[]) =>\n      new Promise((a: Resolve, b: Reject) => {\n        const id = ++c;\n        callbacks[id] = [a, b];\n        const opts = methods[method];\n        worker.postMessage(\n          { type: MESSAGE_TYPE_RPC_TRANSFERABLE, id, method, params },\n          opts.pickTransferablesFromParams ? opts.pickTransferablesFromParams(params) : []\n        );\n      });\n  });\n}\n"]}