'use strict';

var tslib = require('tslib');
var gLite = require('@antv/g-lite');

// const MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
/**
 * listen to mouse/touch/pointer events on DOM wrapper, trigger pointer events
 */
var DOMInteractionPlugin = /** @class */ (function () {
    function DOMInteractionPlugin() {
    }
    DOMInteractionPlugin.prototype.apply = function (context, runtime) {
        var _this = this;
        var renderingService = context.renderingService, renderingContext = context.renderingContext, config = context.config;
        this.context = context;
        var canvas = renderingContext.root.ownerDocument.defaultView;
        // const SUPPORT_ONLY_TOUCH = canvas.supportsTouchEvents && MOBILE_REGEX.test(navigator.userAgent);
        var onPointerMove = function (ev) {
            renderingService.hooks.pointerMove.call(ev);
        };
        var onPointerUp = function (ev) {
            renderingService.hooks.pointerUp.call(ev);
        };
        var onPointerDown = function (ev) {
            renderingService.hooks.pointerDown.call(ev);
        };
        var onPointerOver = function (ev) {
            renderingService.hooks.pointerOver.call(ev);
        };
        var onPointerOut = function (ev) {
            renderingService.hooks.pointerOut.call(ev);
        };
        var onPointerCancel = function (ev) {
            renderingService.hooks.pointerCancel.call(ev);
        };
        var onPointerWheel = function (ev) {
            renderingService.hooks.pointerWheel.call(ev);
        };
        var onClick = function (ev) {
            renderingService.hooks.click.call(ev);
        };
        var addPointerEventListener = function ($el) {
            runtime.globalThis.document.addEventListener('pointermove', onPointerMove, true);
            $el.addEventListener('pointerdown', onPointerDown, true);
            $el.addEventListener('pointerleave', onPointerOut, true);
            $el.addEventListener('pointerover', onPointerOver, true);
            runtime.globalThis.addEventListener('pointerup', onPointerUp, true);
            runtime.globalThis.addEventListener('pointercancel', onPointerCancel, true);
        };
        var addTouchEventListener = function ($el) {
            $el.addEventListener('touchstart', onPointerDown, true);
            $el.addEventListener('touchend', onPointerUp, true);
            $el.addEventListener('touchmove', onPointerMove, true);
            $el.addEventListener('touchcancel', onPointerCancel, true);
        };
        var addMouseEventListener = function ($el) {
            runtime.globalThis.document.addEventListener('mousemove', onPointerMove, true);
            $el.addEventListener('mousedown', onPointerDown, true);
            $el.addEventListener('mouseout', onPointerOut, true);
            $el.addEventListener('mouseover', onPointerOver, true);
            runtime.globalThis.addEventListener('mouseup', onPointerUp, true);
        };
        var removePointerEventListener = function ($el) {
            runtime.globalThis.document.removeEventListener('pointermove', onPointerMove, true);
            $el.removeEventListener('pointerdown', onPointerDown, true);
            $el.removeEventListener('pointerleave', onPointerOut, true);
            $el.removeEventListener('pointerover', onPointerOver, true);
            runtime.globalThis.removeEventListener('pointerup', onPointerUp, true);
        };
        var removeTouchEventListener = function ($el) {
            $el.removeEventListener('touchstart', onPointerDown, true);
            $el.removeEventListener('touchend', onPointerUp, true);
            $el.removeEventListener('touchmove', onPointerMove, true);
            $el.removeEventListener('touchcancel', onPointerCancel, true);
        };
        var removeMouseEventListener = function ($el) {
            runtime.globalThis.document.removeEventListener('mousemove', onPointerMove, true);
            $el.removeEventListener('mousedown', onPointerDown, true);
            $el.removeEventListener('mouseout', onPointerOut, true);
            $el.removeEventListener('mouseover', onPointerOver, true);
            runtime.globalThis.removeEventListener('mouseup', onPointerUp, true);
        };
        renderingService.hooks.init.tap(DOMInteractionPlugin.tag, function () {
            var $el = _this.context.contextService.getDomElement();
            // @ts-ignore
            if (runtime.globalThis.navigator.msPointerEnabled) {
                // @ts-ignore
                $el.style.msContentZooming = 'none';
                // @ts-ignore
                $el.style.msTouchAction = 'none';
            }
            else if (canvas.supportsPointerEvents) {
                $el.style.touchAction = 'none';
            }
            if (canvas.supportsPointerEvents) {
                addPointerEventListener($el);
            }
            else {
                addMouseEventListener($el);
            }
            if (canvas.supportsTouchEvents) {
                addTouchEventListener($el);
            }
            if (config.useNativeClickEvent) {
                $el.addEventListener('click', onClick, true);
            }
            // use passive event listeners
            // @see https://zhuanlan.zhihu.com/p/24555031
            $el.addEventListener('wheel', onPointerWheel, {
                passive: true,
                capture: true,
            });
        });
        renderingService.hooks.destroy.tap(DOMInteractionPlugin.tag, function () {
            var $el = _this.context.contextService.getDomElement();
            // @ts-ignore
            if (runtime.globalThis.navigator.msPointerEnabled) {
                // @ts-ignore
                $el.style.msContentZooming = '';
                // @ts-ignore
                $el.style.msTouchAction = '';
            }
            else if (canvas.supportsPointerEvents) {
                $el.style.touchAction = '';
            }
            if (canvas.supportsPointerEvents) {
                removePointerEventListener($el);
            }
            else {
                removeMouseEventListener($el);
            }
            if (canvas.supportsTouchEvents) {
                removeTouchEventListener($el);
            }
            if (config.useNativeClickEvent) {
                $el.removeEventListener('click', onClick, true);
            }
            $el.removeEventListener('wheel', onPointerWheel, true);
        });
    };
    DOMInteractionPlugin.tag = 'DOMInteraction';
    return DOMInteractionPlugin;
}());

var Plugin = /** @class */ (function (_super) {
    tslib.__extends(Plugin, _super);
    function Plugin() {
        var _this = _super.apply(this, tslib.__spreadArray([], tslib.__read(arguments), false)) || this;
        _this.name = 'dom-interaction';
        return _this;
    }
    Plugin.prototype.init = function () {
        this.addRenderingPlugin(new DOMInteractionPlugin());
    };
    Plugin.prototype.destroy = function () {
        this.removeAllRenderingPlugins();
    };
    return Plugin;
}(gLite.AbstractRendererPlugin));

exports.Plugin = Plugin;
//# sourceMappingURL=index.js.map
