import { __extends, __spreadArray, __read } from 'tslib';
import { CanvasEvent, ElementEvent, RenderReason, isCSSRGB, isPattern, Shape, AbstractRendererPlugin } from '@antv/g-lite';
import { isNil, isNumber, isString } from '@antv/util';

var CANVAS_CAMERA_ID = 'g-canvas-camera';
var HTMLRenderingPlugin = /** @class */ (function () {
    function HTMLRenderingPlugin() {
        this.displayObjectHTMLElementMap = new WeakMap();
    }
    HTMLRenderingPlugin.prototype.joinTransformMatrix = function (matrix) {
        return "matrix(".concat([
            matrix[0],
            matrix[1],
            matrix[4],
            matrix[5],
            matrix[12],
            matrix[13],
        ].join(','), ")");
    };
    HTMLRenderingPlugin.prototype.apply = function (context, runtime) {
        var _this = this;
        var camera = context.camera, renderingContext = context.renderingContext, renderingService = context.renderingService;
        this.context = context;
        var canvas = renderingContext.root.ownerDocument.defaultView;
        var nativeHTMLMap = canvas.context.eventService.nativeHTMLMap;
        var setTransform = function (object, $el) {
            $el.style.transform = _this.joinTransformMatrix(object.getWorldTransform());
        };
        var handleMounted = function (e) {
            var object = e.target;
            if (object.nodeName === Shape.HTML) {
                if (!_this.$camera) {
                    _this.$camera = _this.createCamera(camera);
                }
                // create DOM element
                var $el_1 = _this.getOrCreateEl(object);
                _this.$camera.appendChild($el_1);
                // apply documentElement's style
                if (runtime.enableCSSParsing) {
                    var attributes_1 = object.ownerDocument.documentElement.attributes;
                    Object.keys(attributes_1).forEach(function (name) {
                        $el_1.style[name] = attributes_1[name];
                    });
                }
                Object.keys(object.attributes).forEach(function (name) {
                    _this.updateAttribute(name, object);
                });
                setTransform(object, $el_1);
                nativeHTMLMap.set($el_1, object);
            }
        };
        var handleUnmounted = function (e) {
            var object = e.target;
            if (object.nodeName === Shape.HTML && _this.$camera) {
                var $el = _this.getOrCreateEl(object);
                if ($el) {
                    $el.remove();
                    nativeHTMLMap.delete($el);
                }
            }
        };
        var handleAttributeChanged = function (e) {
            var object = e.target;
            if (object.nodeName === Shape.HTML) {
                var attrName = e.attrName;
                _this.updateAttribute(attrName, object);
            }
        };
        var handleBoundsChanged = function (e) {
            var object = e.target;
            if (object.nodeName === Shape.HTML) {
                var $el = _this.getOrCreateEl(object);
                setTransform(object, $el);
            }
        };
        var handleCanvasResize = function () {
            if (_this.$camera) {
                var _a = _this.context.config, width = _a.width, height = _a.height;
                _this.$camera.style.width = "".concat(width || 0, "px");
                _this.$camera.style.height = "".concat(height || 0, "px");
            }
        };
        renderingService.hooks.init.tap(HTMLRenderingPlugin.tag, function () {
            canvas.addEventListener(CanvasEvent.RESIZE, handleCanvasResize);
            canvas.addEventListener(ElementEvent.MOUNTED, handleMounted);
            canvas.addEventListener(ElementEvent.UNMOUNTED, handleUnmounted);
            canvas.addEventListener(ElementEvent.ATTR_MODIFIED, handleAttributeChanged);
            canvas.addEventListener(ElementEvent.BOUNDS_CHANGED, handleBoundsChanged);
        });
        renderingService.hooks.endFrame.tap(HTMLRenderingPlugin.tag, function () {
            if (_this.$camera &&
                renderingContext.renderReasons.has(RenderReason.CAMERA_CHANGED)) {
                _this.$camera.style.transform = _this.joinTransformMatrix(camera.getOrthoMatrix());
            }
        });
        renderingService.hooks.destroy.tap(HTMLRenderingPlugin.tag, function () {
            // remove camera
            if (_this.$camera) {
                _this.$camera.remove();
            }
            canvas.removeEventListener(CanvasEvent.RESIZE, handleCanvasResize);
            canvas.removeEventListener(ElementEvent.MOUNTED, handleMounted);
            canvas.removeEventListener(ElementEvent.UNMOUNTED, handleUnmounted);
            canvas.removeEventListener(ElementEvent.ATTR_MODIFIED, handleAttributeChanged);
            canvas.removeEventListener(ElementEvent.BOUNDS_CHANGED, handleBoundsChanged);
        });
    };
    HTMLRenderingPlugin.prototype.createCamera = function (camera) {
        var _a = this.context.config, doc = _a.document, width = _a.width, height = _a.height;
        var $canvas = this.context.contextService.getDomElement();
        var $container = $canvas.parentNode;
        if ($container) {
            var cameraId = CANVAS_CAMERA_ID;
            var $existedCamera = $container.querySelector('#' + cameraId);
            if (!$existedCamera) {
                var $camera = (doc || document).createElement('div');
                $existedCamera = $camera;
                $camera.id = cameraId;
                // use absolute position
                $camera.style.position = 'absolute';
                // account for DOM element's offset @see https://github.com/antvis/G/issues/1150
                $camera.style.left = "".concat($canvas.offsetLeft || 0, "px");
                $camera.style.top = "".concat($canvas.offsetTop || 0, "px");
                $camera.style.transformOrigin = 'left top';
                $camera.style.transform = this.joinTransformMatrix(camera.getOrthoMatrix());
                // HTML elements should not overflow with canvas @see https://github.com/antvis/G/issues/1163
                $camera.style.overflow = 'hidden';
                $camera.style.pointerEvents = 'none';
                $camera.style.width = "".concat(width || 0, "px");
                $camera.style.height = "".concat(height || 0, "px");
                $container.appendChild($camera);
            }
            return $existedCamera;
        }
        return null;
    };
    HTMLRenderingPlugin.prototype.getOrCreateEl = function (object) {
        var doc = this.context.config.document;
        var $existedElement = this.displayObjectHTMLElementMap.get(object);
        if (!$existedElement) {
            $existedElement = (doc || document).createElement('div');
            object.parsedStyle.$el = $existedElement;
            this.displayObjectHTMLElementMap.set(object, $existedElement);
            if (object.id) {
                $existedElement.id = object.id;
            }
            if (object.name) {
                $existedElement.setAttribute('name', object.name);
            }
            if (object.className) {
                $existedElement.className = object.className;
            }
            // use absolute position
            $existedElement.style.position = 'absolute';
            // @see https://github.com/antvis/G/issues/1150
            $existedElement.style['will-change'] = 'transform';
            $existedElement.style.transform = this.joinTransformMatrix(object.getWorldTransform());
        }
        return $existedElement;
    };
    HTMLRenderingPlugin.prototype.updateAttribute = function (name, object) {
        var $el = this.getOrCreateEl(object);
        switch (name) {
            case 'innerHTML':
                var innerHTML = object.parsedStyle.innerHTML;
                if (isString(innerHTML)) {
                    $el.innerHTML = innerHTML;
                }
                else {
                    $el.innerHTML = '';
                    $el.appendChild(innerHTML);
                }
                break;
            case 'x':
                $el.style.left = "".concat(object.parsedStyle.x, "px");
                break;
            case 'y':
                $el.style.top = "".concat(object.parsedStyle.y, "px");
                break;
            case 'transformOrigin':
                var transformOrigin = object.parsedStyle.transformOrigin;
                $el.style['transform-origin'] = "".concat(transformOrigin[0].value, " ").concat(transformOrigin[1].value);
                break;
            case 'width':
                if (this.context.enableCSSParsing) {
                    var width = object.computedStyleMap().get('width');
                    $el.style.width = width.toString();
                }
                else {
                    var width = object.parsedStyle.width;
                    $el.style.width = isNumber(width)
                        ? "".concat(width, "px")
                        : width.toString();
                }
                break;
            case 'height':
                if (this.context.enableCSSParsing) {
                    var height = object.computedStyleMap().get('height');
                    $el.style.height = height.toString();
                }
                else {
                    var height = object.parsedStyle.height;
                    $el.style.height = isNumber(height)
                        ? "".concat(height, "px")
                        : height.toString();
                }
                break;
            case 'zIndex':
                var zIndex = object.parsedStyle.zIndex;
                $el.style['z-index'] = "".concat(zIndex);
                break;
            case 'visibility':
                var visibility = object.parsedStyle.visibility;
                $el.style.visibility = visibility;
                break;
            case 'pointerEvents':
                var _a = object.parsedStyle.pointerEvents, pointerEvents = _a === void 0 ? 'auto' : _a;
                $el.style.pointerEvents = pointerEvents;
                break;
            case 'opacity':
                var opacity = object.parsedStyle.opacity;
                $el.style.opacity = "".concat(opacity);
                break;
            case 'fill':
                var fill = object.parsedStyle.fill;
                var color = '';
                if (isCSSRGB(fill)) {
                    if (fill.isNone) {
                        color = 'transparent';
                    }
                    else {
                        color = object.getAttribute('fill');
                    }
                }
                else if (Array.isArray(fill)) {
                    color = object.getAttribute('fill');
                }
                else if (isPattern(fill)) ;
                $el.style.background = color;
                break;
            case 'stroke':
                var stroke = object.parsedStyle.stroke;
                var borderColor = '';
                if (isCSSRGB(stroke)) {
                    if (stroke.isNone) {
                        borderColor = 'transparent';
                    }
                    else {
                        borderColor = object.getAttribute('stroke');
                    }
                }
                else if (Array.isArray(stroke)) {
                    borderColor = object.getAttribute('stroke');
                }
                else if (isPattern(stroke)) ;
                $el.style['border-color'] = borderColor;
                $el.style['border-style'] = 'solid';
                break;
            case 'lineWidth':
                var lineWidth = object.parsedStyle.lineWidth;
                $el.style['border-width'] = "".concat(lineWidth || 0, "px");
                break;
            case 'lineDash':
                $el.style['border-style'] = 'dashed';
                break;
            case 'filter':
                var filter = object.style.filter;
                $el.style.filter = filter;
                break;
            default:
                if (!isNil(object.style[name]) && object.style[name] !== '') {
                    $el.style[name] = object.style[name];
                }
        }
    };
    HTMLRenderingPlugin.tag = 'HTMLRendering';
    return HTMLRenderingPlugin;
}());

var Plugin = /** @class */ (function (_super) {
    __extends(Plugin, _super);
    function Plugin() {
        var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;
        _this.name = 'html-renderer';
        return _this;
    }
    Plugin.prototype.init = function () {
        this.addRenderingPlugin(new HTMLRenderingPlugin());
    };
    Plugin.prototype.destroy = function () {
        this.removeAllRenderingPlugins();
    };
    return Plugin;
}(AbstractRendererPlugin));

export { Plugin };
//# sourceMappingURL=index.esm.js.map
