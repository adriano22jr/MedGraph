import type { DisplayObject } from '@antv/g-lite';
import { Instanced } from './Instanced';
import { LightPool } from '../LightPool';
import { TexturePool } from '../TexturePool';
import { RenderHelper } from '../render';
import { BatchContext } from '../renderer';
export declare enum TextUniform {
    SDF_MAP = "u_SDFMap",
    SDF_MAP_SIZE = "u_SDFMapSize",
    FONT_SIZE = "u_FontSize",
    GAMMA_SCALE = "u_GammaScale",
    STROKE_BLUR = "u_StrokeBlur",
    HAS_STROKE = "u_HasStroke"
}
export declare class TextDrawcall extends Instanced {
    protected renderHelper: RenderHelper;
    protected texturePool: TexturePool;
    protected lightPool: LightPool;
    private glyphManager;
    private packedBufferObjectMap;
    private tmpMat4;
    private fontHash;
    constructor(renderHelper: RenderHelper, texturePool: TexturePool, lightPool: LightPool, object: DisplayObject, drawcallCtors: (new (..._: any) => Instanced)[], index: number, context: BatchContext);
    private calcFontHash;
    shouldMerge(object: DisplayObject, index: number): boolean;
    createGeometry(objects: DisplayObject[]): void;
    protected createMaterial(objects: DisplayObject[]): void;
    changeRenderOrder(object: DisplayObject, renderOrder: number): void;
    updateAttribute(objects: DisplayObject[], startIndex: number, name: string, value: any): void;
    private buildTextBuffers;
    destroy(): void;
}
