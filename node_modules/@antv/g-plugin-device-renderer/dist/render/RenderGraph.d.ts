import type { Device, RenderTarget, Texture } from '@antv/g-device-api';
import type { PassSetupFunc, RGGraphBuilder, RGGraphBuilderDebug } from './interfaces';
import { RGAttachmentSlot } from './interfaces';
import { RenderGraphPass } from './RenderGraphPass';
import { RGRenderTarget } from './RenderTarget';
import type { RGRenderTargetDescription } from './RenderTargetDescription';
export declare class RenderGraph implements RGGraphBuilder {
    private device;
    private currentPass;
    renderTargetDeadPool: RGRenderTarget[];
    private singleSampledTextureDeadPool;
    constructor(device: Device);
    private acquireRenderTargetForDescription;
    private acquireSingleSampledTextureForDescription;
    private currentGraph;
    beginGraphBuilder(): void;
    pushPass(setupFunc: PassSetupFunc): void;
    createRenderTargetID(desc: Readonly<RGRenderTargetDescription>, debugName: string): number;
    private createResolveTextureID;
    /**
     * 查找最靠近输出的一个关联目标 RT 的 RGPass
     */
    private findMostRecentPassThatAttachedRenderTarget;
    resolveRenderTargetPassAttachmentSlot(pass: RenderGraphPass, attachmentSlot: RGAttachmentSlot): number;
    private findPassForResolveRenderTarget;
    resolveRenderTarget(renderTargetID: number): number;
    resolveRenderTargetToExternalTexture(renderTargetID: number, texture: Texture, level?: number): void;
    getRenderTargetDescription(renderTargetID: number): Readonly<RGRenderTargetDescription>;
    private renderTargetOutputCount;
    private renderTargetResolveCount;
    private resolveTextureUseCount;
    private renderTargetAliveForID;
    private singleSampledTextureForResolveTextureID;
    private scheduleAddUseCount;
    private acquireRenderTargetForID;
    private releaseRenderTargetForID;
    private acquireResolveTextureInputTextureForID;
    private determineResolveParam;
    private schedulePass;
    private scheduleGraph;
    private execPass;
    private execGraph;
    execute(): void;
    getDebug(): RGGraphBuilderDebug;
    getPasses(): RenderGraphPass[];
    getPassDebugThumbnails(pass: RenderGraphPass): boolean[];
    getPassRenderTargetID(pass: RenderGraphPass, slot: RGAttachmentSlot): number;
    getRenderTargetIDDebugName(renderTargetID: number): string;
    getResolveTextureForID(resolveTextureID: number): Texture;
    getRenderTargetAttachment(slot: RGAttachmentSlot): RenderTarget | null;
    getRenderTargetTexture(slot: RGAttachmentSlot): Texture | null;
    newGraphBuilder(): RGGraphBuilder;
    destroy(): void;
}
