export declare function hashCodeNumberUpdate(hash: number, v: number): number;
export declare function hashCodeNumberFinish(hash: number): number;
export declare function nullHashFunc<T>(k: T): number;
export type EqualFunc<K> = (a: K, b: K) => boolean;
export type HashFunc<K> = (a: K) => number;
declare class HashBucket<K, V> {
    keys: K[];
    values: V[];
}
export declare class HashMap<K, V> {
    private keyEqualFunc;
    private keyHashFunc;
    buckets: Map<number, HashBucket<K, V>>;
    constructor(keyEqualFunc: EqualFunc<K>, keyHashFunc: HashFunc<K>);
    private findBucketIndex;
    private findBucket;
    get(k: K): V | null;
    add(k: K, v: V): void;
    delete(k: K): void;
    clear(): void;
    size(): number;
    values(): IterableIterator<V>;
}
export {};
