import type { DataURLOptions, RenderingPlugin, RenderingPluginContext } from '@antv/g-lite';
import type { Device, SwapChain, Texture, TextureDescriptor } from '@antv/g-device-api';
import type { LightPool } from './LightPool';
import type { RenderHelper } from './render';
import { RenderInstList } from './render';
import type { BatchManager } from './renderer';
import type { TexturePool } from './TexturePool';
import { DeviceRendererPluginOptions } from './interfaces';
export declare const SceneUniformBufferIndex = 0;
export declare enum SceneUniform {
    PROJECTION_MATRIX = "u_ProjectionMatrix",
    VIEW_MATRIX = "u_ViewMatrix",
    CAMERA_POSITION = "u_CameraPosition",
    DEVICE_PIXEL_RATIO = "u_DevicePixelRatio",
    VIEWPORT = "u_Viewport",
    IS_ORTHO = "u_IsOrtho",
    IS_PICKING = "u_IsPicking"
}
export declare class RenderGraphPlugin implements RenderingPlugin {
    private renderHelper;
    private lightPool;
    private texturePool;
    private batchManager;
    private options;
    static tag: string;
    private context;
    constructor(renderHelper: RenderHelper, lightPool: LightPool, texturePool: TexturePool, batchManager: BatchManager, options: Partial<DeviceRendererPluginOptions>);
    private device;
    private swapChain;
    private renderLists;
    /**
     * Render Graph builder at each frame
     */
    private builder;
    private enableCapture;
    private captureOptions;
    private capturePromise;
    private resolveCapturePromise;
    /**
     * An array of sub cameras used in VR scenes.
     * @see https://threejs.org/docs/#api/en/cameras/ArrayCamera
     */
    private cameras;
    getDevice(): Device;
    getSwapChain(): SwapChain;
    getRenderLists(): {
        /**
         * used in main forward rendering pass
         */
        leftEye: RenderInstList;
        /**
         * right eye in VR session.
         */
        rightEye: RenderInstList;
        /**
         * used in picking pass, should disable blending
         */
        picking: RenderInstList;
    };
    apply(context: RenderingPluginContext): void;
    /**
     * load texture in an async way and render when loaded
     */
    loadTexture(src: string | TexImageSource, descriptor?: TextureDescriptor, successCallback?: (t: Texture) => void): Texture;
    toDataURL(options: Partial<DataURLOptions>): Promise<string>;
}
