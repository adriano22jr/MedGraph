import type { Cursor, DisplayObject, CanvasConfig as GCanvasConfig, DataURLOptions as GDataURLOptions, IRenderer, PointLike } from '@antv/g';
import { Canvas as GCanvas } from '@antv/g';
import type { CanvasOptions } from '../spec/canvas';
import type { CanvasLayer } from '../types/canvas';
export interface CanvasConfig extends Pick<GCanvasConfig, 'container' | 'devicePixelRatio' | 'width' | 'height' | 'cursor'> {
    renderer?: CanvasOptions['renderer'];
    background?: string;
}
export interface DataURLOptions extends GDataURLOptions {
    /**
     * <zh/> 导出模式
     *  - viewport: 导出视口内容
     *  - overall: 导出整个画布
     *
     * <en/> export mode
     *  - viewport: export the content of the viewport
     *  - overall: export the entire canvas
     */
    mode?: 'viewport' | 'overall';
}
/**
 * @deprecated this canvas will be replace by layered canvas
 */
export declare class Canvas {
    protected config: CanvasConfig;
    background: GCanvas;
    main: GCanvas;
    label: GCanvas;
    transient: GCanvas;
    get canvas(): {
        main: GCanvas;
        label: GCanvas;
        transient: GCanvas;
        background: GCanvas;
    };
    get document(): import("@antv/g").Document;
    renderers: Record<CanvasLayer, IRenderer>;
    private initialized;
    constructor(config: CanvasConfig);
    init(): Promise<void>;
    getRendererType(layer?: CanvasLayer): "canvas" | "svg" | "gpu" | "unknown";
    get context(): import("@antv/g").CanvasContext;
    getDevice(): any;
    getConfig(): CanvasConfig;
    setBackground(background?: string | undefined): void;
    setCursor(cursor: Cursor): void;
    getSize(): [number, number];
    resize(width: number, height: number): void;
    getCamera(): import("@antv/g").ICamera;
    getBounds(): import("@antv/g").AABB;
    getContainer(): HTMLElement | null;
    appendChild<T extends DisplayObject>(child: T): T;
    getContextService(): import("@antv/g").ContextService<unknown>;
    viewport2Client(viewport: PointLike): PointLike;
    viewport2Canvas(viewport: PointLike): PointLike;
    client2Viewport(client: PointLike): PointLike;
    canvas2Viewport(canvas: PointLike): PointLike;
    toDataURL(options?: Partial<DataURLOptions>): Promise<string>;
    destroy(): void;
}
