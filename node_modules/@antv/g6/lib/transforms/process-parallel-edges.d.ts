import type { PathStyleProps } from '@antv/g';
import type { RuntimeContext } from '../runtime/types';
import type { EdgeData } from '../spec';
import type { CallableValue, ID } from '../types';
import type { BaseTransformOptions } from './base-transform';
import { BaseTransform } from './base-transform';
import type { DrawData } from './types';
export interface ProcessParallelEdgesOptions extends BaseTransformOptions {
    /**
     * <zh/> 处理模式，默认为捆绑
     *
     * <en/> Processing mode, default is bundle
     * @remarks
     * <zh/>
     * - merge: 将平行边合并为一条边，适用于不需要区分平行边的情况
     * - bundle: 每条边都会与其他所有平行边捆绑在一起，并通过改变曲率与其他边分开。如果一组平行边的数量是奇数，那么中心的边将被绘制为直线，其他的边将被绘制为曲线
     * <en/>
     * - merge: Merge parallel edges into one edge which is suitable for cases where parallel edges do not need to be distinguished
     * - bundle: Each edge will be bundled with all other parallel edges and separated from them by varying the curvature. If the number of parallel edges in a group is odd, the central edge will be drawn as a straight line, and the others will be drawn as curves
     */
    mode: 'bundle' | 'merge';
    /**
     * <zh/> 考虑要处理的边，默认为全部边
     *
     * <en/> The edges to be handled, all edges by default
     */
    edges?: ID[];
    /**
     * <zh/> 边之间的距离，仅在捆绑模式下有效
     *
     * <en/> The distance between edges, only valid for bundling mode
     */
    distance?: number;
    /**
     * <zh/> 合并边的样式，仅在合并模式下有效
     *
     * <en/> The style of the merged edge, only valid for merging mode
     */
    style?: CallableValue<PathStyleProps, EdgeData[]>;
}
/**
 * <zh/> 处理平行边，即多条边共享同一源节点和目标节点
 *
 * <en/> Process parallel edges which share the same source and target nodes
 */
export declare class ProcessParallelEdges extends BaseTransform<ProcessParallelEdgesOptions> {
    static defaultOptions: Partial<ProcessParallelEdgesOptions>;
    private cacheMergeStyle;
    constructor(context: RuntimeContext, options: ProcessParallelEdgesOptions);
    beforeDraw(input: DrawData): DrawData;
    private getAffectedParallelEdges;
    protected applyBundlingStyle: (input: DrawData, edges: Map<ID, EdgeData>, distance: number) => void;
    private resetEdgeStyle;
    protected applyMergingStyle: (input: DrawData, edges: Map<ID, EdgeData>) => void;
}
/**
 * <zh/> 按照端点分组
 *
 * <en/> Group by endpoints
 * @param edges - <zh/> 边集合 | <en/> Edges
 * @returns <zh/> 端点分组后的边集合 | <en/> Edges grouped by endpoints
 */
export declare const groupByEndpoints: (edges: Map<ID, EdgeData>) => {
    edgeMap: Map<string, EdgeData[]>;
    reverses: Record<string, boolean>;
};
/**
 * <zh/> 获取平行边
 *
 * <en/> Get parallel edges
 * @param edge - <zh/> 目标边 | <en/> Target edge
 * @param edges - <zh/> 边集合 | <en/> Edges
 * @param containsSelf - <zh/> 输出结果是否包含目标边 | <en/> Whether the output result contains the target edge
 * @returns <zh/> 平行边集合 | <en/> Parallel edges
 */
export declare const getParallelEdges: (edge: EdgeData, edges: EdgeData[], containsSelf?: boolean) => EdgeData[];
/**
 * <zh/> 判断两条边是否平行
 *
 * <en/> Determine whether two edges are parallel
 * @param edge1 - <zh/> 边1 | <en/> Edge 1
 * @param edge2 - <zh/> 边2 | <en/> Edge 2
 * @returns <zh/> 是否平行 | <en/> Whether is parallel
 */
export declare const isParallelEdges: (edge1: EdgeData, edge2: EdgeData) => boolean;
