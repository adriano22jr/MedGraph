"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Contextmenu = void 0;
const dom_1 = require("../../utils/dom");
const base_plugin_1 = require("../base-plugin");
const util_1 = require("./util");
/**
 * <zh/> 上下文菜单
 *
 * <en/> Contextmenu
 * @remarks
 * <zh/> 上下文菜单，也被称为右键菜单，是当用户在某个特定区域上点击后出现的一个菜单。支持在点击前后，触发自定义事件。
 *
 * <en/> Contextmenu, also known as the right-click menu , is a menu that appears when a user clicks on a specific area. Supports triggering custom events before and after clicking.
 */
class Contextmenu extends base_plugin_1.BasePlugin {
    static defaultOptions = {
        trigger: 'contextmenu',
        offset: [4, 4],
        loadingContent: '<div class="g6-contextmenu-loading">Loading...</div>',
        getContent: () => 'It is a empty context menu.',
        enable: () => true,
    };
    $element = (0, dom_1.createPluginContainer)('contextmenu', false);
    constructor(context, options) {
        super(context, Object.assign({}, Contextmenu.defaultOptions, options));
        const $container = this.context.canvas.getContainer();
        $container.appendChild(this.$element);
        // 设置样式
        (0, dom_1.insertDOM)('g6-contextmenu-css', 'style', {}, util_1.CONTEXTMENU_CSS, document.head);
        this.update(options);
    }
    /**
     * <zh/> 显示上下文菜单
     *
     * <en/> Show the contextmenu
     * @param event - <zh/> 元素指针事件 | <en/> Element pointer event
     * @internal
     */
    async show(event) {
        const { enable, offset } = this.options;
        if ((typeof enable === 'function' && !enable(event)) || !enable) {
            this.hide();
            return;
        }
        const content = await this.getDOMContent(event);
        if (content instanceof HTMLElement) {
            this.$element.appendChild(content);
        }
        else {
            this.$element.innerHTML = content;
        }
        // NOTICE: 为什么事件中的 client 是相对浏览器，而不是画布容器？
        const clientRect = this.context.graph.getCanvas().getContainer().getBoundingClientRect();
        this.$element.style.left = `${event.client.x - clientRect.left + offset[0]}px`;
        this.$element.style.top = `${event.client.y - clientRect.top + offset[1]}px`;
        this.$element.style.display = 'block';
    }
    /**
     * <zh/> 隐藏上下文菜单
     *
     * <en/> Hide the contextmenu
     */
    hide() {
        this.$element.style.display = 'none';
    }
    /**
     * <zh/> 更新上下文菜单的配置项
     *
     * <en/> Update the contextmenu options
     * @param options - <zh/> 配置项 | <en/> Options
     * @internal
     */
    update(options) {
        this.unbindEvents();
        super.update(options);
        this.bindEvents();
    }
    /**
     * <zh/> 销毁上下文菜单
     *
     * <en/> Destroy the contextmenu
     */
    destroy() {
        this.unbindEvents();
        super.destroy();
        this.$element.remove();
    }
    async getDOMContent(event) {
        const { getContent, getItems } = this.options;
        if (getItems) {
            return (0, util_1.getContentFromItems)(await getItems(event));
        }
        return await getContent(event);
    }
    bindEvents() {
        const { graph } = this.context;
        const { trigger } = this.options;
        graph.on(`canvas:${trigger}`, this.onTriggerEvent);
        graph.on(`node:${trigger}`, this.onTriggerEvent);
        graph.on(`edge:${trigger}`, this.onTriggerEvent);
        graph.on(`combo:${trigger}`, this.onTriggerEvent);
        document.addEventListener('click', this.onMenuItemClick);
    }
    unbindEvents() {
        const { graph } = this.context;
        const { trigger } = this.options;
        graph.off(`canvas:${trigger}`, this.onTriggerEvent);
        graph.off(`node:${trigger}`, this.onTriggerEvent);
        graph.off(`edge:${trigger}`, this.onTriggerEvent);
        graph.off(`combo:${trigger}`, this.onTriggerEvent);
        document.removeEventListener('click', this.onMenuItemClick);
    }
    onTriggerEvent = (event) => {
        // `contextmenu` 事件默认会触发浏览器的右键菜单，需要阻止默认事件
        // `click` 事件不需要阻止默认事件
        event.preventDefault?.();
        this.show(event);
    };
    onMenuItemClick = (event) => {
        const { onClick } = this.options;
        if (event.target instanceof HTMLElement) {
            if (event.target.className.includes('g6-contextmenu-li')) {
                const v = event.target.getAttribute('value');
                onClick && onClick(v, event.target);
                this.hide();
            }
            // 点击其他地方，隐藏菜单
            if (!this.context.graph.getCanvas().getContainer().contains(event.target)) {
                this.hide();
            }
        }
    };
}
exports.Contextmenu = Contextmenu;
//# sourceMappingURL=index.js.map