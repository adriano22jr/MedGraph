"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollapseExpand = void 0;
const util_1 = require("@antv/util");
const constants_1 = require("../constants");
const collapsibility_1 = require("../utils/collapsibility");
const element_1 = require("../utils/element");
const base_behavior_1 = require("./base-behavior");
/**
 * <zh/> 展开/收起组合元素交互
 *
 * <en/> Collapse/Expand Combo behavior
 * @remarks
 * <zh/> 通过双击 Combo 进行展开或收起 Combo。
 *
 * <en/> Expand or collapse a Combo by double-clicking on it.
 */
class CollapseExpand extends base_behavior_1.BaseBehavior {
    static defaultOptions = {
        enable: true,
        animation: true,
        trigger: constants_1.CommonEvent.DBLCLICK,
    };
    constructor(context, options) {
        super(context, Object.assign({}, CollapseExpand.defaultOptions, options));
        this.bindEvents();
    }
    update(options) {
        this.unbindEvents();
        super.update(options);
        this.bindEvents();
    }
    bindEvents() {
        const { graph } = this.context;
        const { trigger } = this.options;
        graph.on(`node:${trigger}`, this.onCollapseExpand);
        graph.on(`combo:${trigger}`, this.onCollapseExpand);
    }
    unbindEvents() {
        const { graph } = this.context;
        const { trigger } = this.options;
        graph.off(`node:${trigger}`, this.onCollapseExpand);
        graph.off(`combo:${trigger}`, this.onCollapseExpand);
    }
    onCollapseExpand = async (event) => {
        if (!this.validate(event))
            return;
        const { target } = event;
        if (!(0, element_1.isElement)(target))
            return;
        const id = target.id;
        const { model, graph } = this.context;
        const data = model.getElementDataById(id);
        if (!data)
            return false;
        const { onCollapse, onExpand, animation } = this.options;
        if ((0, collapsibility_1.isCollapsed)(data)) {
            await graph.expandElement(id, animation);
            onExpand?.(id);
        }
        else {
            await graph.collapseElement(id, animation);
            onCollapse?.(id);
        }
    };
    validate(event) {
        if (this.destroyed)
            return false;
        const { enable } = this.options;
        if ((0, util_1.isFunction)(enable))
            return enable(event);
        return !!enable;
    }
    destroy() {
        this.unbindEvents();
        super.destroy();
    }
}
exports.CollapseExpand = CollapseExpand;
//# sourceMappingURL=collapse-expand.js.map