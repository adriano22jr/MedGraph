"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HoverActivate = void 0;
const util_1 = require("@antv/util");
const constants_1 = require("../constants");
const element_1 = require("../constants/element");
const id_1 = require("../utils/id");
const relation_1 = require("../utils/relation");
const base_behavior_1 = require("./base-behavior");
/**
 * <zh/> 悬浮元素交互
 *
 * <en/> Hover element behavior
 * @remarks
 * <zh/> 当鼠标悬停在元素上时，可以激活元素的状态，例如高亮节点或边。
 *
 * <en/> When the mouse hovers over an element, you can activate the state of the element, such as highlighting nodes or edges.
 */
class HoverActivate extends base_behavior_1.BaseBehavior {
    static defaultOptions = {
        animation: false,
        enable: true,
        degree: 0,
        state: 'active',
        inactiveState: undefined,
    };
    isFrozen = false;
    constructor(context, options) {
        super(context, Object.assign({}, HoverActivate.defaultOptions, options));
        this.bindEvents();
    }
    toggleFrozen = (e) => {
        this.isFrozen = e.type === 'dragstart';
    };
    bindEvents() {
        const { graph } = this.context;
        this.unbindEvents();
        element_1.ELEMENT_TYPES.forEach((type) => {
            graph.on(`${type}:${constants_1.CommonEvent.POINTER_OVER}`, this.hoverElement);
            graph.on(`${type}:${constants_1.CommonEvent.POINTER_OUT}`, this.hoverEndElement);
        });
        const canvas = this.context.canvas.document;
        canvas.addEventListener(`${constants_1.CommonEvent.DRAG_START}`, this.toggleFrozen);
        canvas.addEventListener(`${constants_1.CommonEvent.DRAG_END}`, this.toggleFrozen);
    }
    hoverElement = (event) => {
        if (!this.validate(event))
            return;
        this.updateElementsState(event, true);
        this.options.onHover?.(event);
    };
    hoverEndElement = (event) => {
        if (!this.validate(event))
            return;
        this.updateElementsState(event, false);
        this.options.onHoverEnd?.(event);
    };
    updateElementsState = (event, add) => {
        if (!this.options.state && !this.options.inactiveState)
            return;
        const { graph } = this.context;
        const { targetType, target } = event;
        const activeIds = (0, relation_1.getElementNthDegreeIds)(graph, targetType, target.id, this.options.degree);
        const states = {};
        if (this.options.state) {
            Object.assign(states, this.getElementsState(activeIds, this.options.state, add));
        }
        if (this.options.inactiveState) {
            const inactiveIds = (0, id_1.idsOf)(graph.getData(), true).filter((id) => !activeIds.includes(id));
            Object.assign(states, this.getElementsState(inactiveIds, this.options.inactiveState, add));
        }
        graph.setElementState(states, this.options.animation);
    };
    getElementsState = (ids, state, add) => {
        const { graph } = this.context;
        const states = {};
        ids.forEach((id) => {
            const currentState = graph.getElementState(id);
            const updatedState = add ? [...currentState, state] : currentState.filter((s) => s !== state);
            states[id] = updatedState;
        });
        return states;
    };
    validate(event) {
        if (this.destroyed || this.isFrozen)
            return false;
        const { enable } = this.options;
        if ((0, util_1.isFunction)(enable))
            return enable(event);
        return !!enable;
    }
    unbindEvents() {
        const { graph } = this.context;
        element_1.ELEMENT_TYPES.forEach((type) => {
            graph.off(`${type}:${constants_1.CommonEvent.POINTER_OVER}`, this.hoverElement);
            graph.off(`${type}:${constants_1.CommonEvent.POINTER_OUT}`, this.hoverEndElement);
        });
        const canvas = this.context.canvas.document;
        canvas.removeEventListener(`${constants_1.CommonEvent.DRAG_START}`, this.toggleFrozen);
        canvas.removeEventListener(`${constants_1.CommonEvent.DRAG_END}`, this.toggleFrozen);
    }
    destroy() {
        this.unbindEvents();
        super.destroy();
    }
}
exports.HoverActivate = HoverActivate;
//# sourceMappingURL=hover-activate.js.map