"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FocusElement = void 0;
const util_1 = require("@antv/util");
const constants_1 = require("../constants");
const element_1 = require("../constants/element");
const base_behavior_1 = require("./base-behavior");
/**
 * <zh/> 聚焦元素交互行为
 *
 * <en/> Focus element behavior
 * @remarks
 * <zh/> 点击元素时，将元素聚焦到视图中心。
 *
 * <en/> When an element is clicked, the element is focused to the center of the view.
 */
class FocusElement extends base_behavior_1.BaseBehavior {
    static defaultOptions = {
        animation: {
            easing: 'ease-in',
            duration: 500,
        },
        enable: true,
    };
    constructor(context, options) {
        super(context, Object.assign({}, FocusElement.defaultOptions, options));
        this.bindEvents();
    }
    bindEvents() {
        const { graph } = this.context;
        this.unbindEvents();
        element_1.ELEMENT_TYPES.forEach((type) => {
            graph.on(`${type}:${constants_1.CommonEvent.CLICK}`, this.focus);
        });
    }
    focus = async (event) => {
        if (!this.validate(event))
            return;
        const { graph } = this.context;
        await graph.focusElement(event.target.id, this.options.animation);
    };
    validate(event) {
        if (this.destroyed)
            return false;
        const { enable } = this.options;
        if ((0, util_1.isFunction)(enable))
            return enable(event);
        return !!enable;
    }
    unbindEvents() {
        const { graph } = this.context;
        element_1.ELEMENT_TYPES.forEach((type) => {
            graph.off(`${type}:${constants_1.CommonEvent.CLICK}`, this.focus);
        });
    }
    destroy() {
        this.unbindEvents();
        super.destroy();
    }
}
exports.FocusElement = FocusElement;
//# sourceMappingURL=focus-element.js.map