"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClickSelect = void 0;
const util_1 = require("@antv/util");
const constants_1 = require("../constants");
const element_1 = require("../constants/element");
const id_1 = require("../utils/id");
const relation_1 = require("../utils/relation");
const shortcut_1 = require("../utils/shortcut");
const base_behavior_1 = require("./base-behavior");
/**
 * <zh/> 点击元素
 *
 * <en/> Click Element
 * @remarks
 * <zh/> 当鼠标点击元素时，可以激活元素的状态，例如选中节点或边。当 degree 设置为 `1` 时，点击节点会高亮当前节点及其直接相邻的节点和边。
 *
 * <en/> When the mouse clicks on an element, you can activate the state of the element, such as selecting nodes or edges. When the degree is 1, clicking on a node will highlight the current node and its directly adjacent nodes and edges.
 */
class ClickSelect extends base_behavior_1.BaseBehavior {
    selectedElementIds = new Set();
    neighborSelectedElementIds = new Set();
    shortcut;
    static defaultOptions = {
        animation: true,
        enable: true,
        multiple: false,
        trigger: ['shift'],
        state: 'selected',
        neighborState: 'selected',
        unselectedState: undefined,
        degree: 0,
    };
    constructor(context, options) {
        super(context, Object.assign({}, ClickSelect.defaultOptions, options));
        this.shortcut = new shortcut_1.Shortcut(context.graph);
        this.bindEvents();
    }
    bindEvents() {
        const { graph } = this.context;
        this.unbindEvents();
        element_1.ELEMENT_TYPES.forEach((type) => {
            graph.on(`${type}:${constants_1.CommonEvent.CLICK}`, this.onClickSelect);
        });
        graph.on(constants_1.CanvasEvent.CLICK, this.onClickCanvas);
    }
    onClickSelect = (event) => {
        if (!this.validate(event))
            return;
        this.updateElementsState(event, false);
        this.updateElementsState(event, true);
        this.options.onClick?.(event);
    };
    onClickCanvas = (event) => {
        if (!this.validate(event))
            return;
        this.updateElementsState(event, false);
        this.selectedElementIds.clear();
        this.neighborSelectedElementIds.clear();
        this.options.onClick?.(event);
    };
    updateElementsState = (event, add) => {
        if (!this.options.state && !this.options.unselectedState)
            return;
        const { graph } = this.context;
        const { target } = event;
        if (add) {
            // 如果当前元素已经被选中，则取消选中 | If the current element is already selected, deselect it
            if (this.selectedElementIds.has(target.id)) {
                this.selectedElementIds.delete(target.id);
            }
            else {
                const isMultiple = this.options.multiple && this.shortcut.match(this.options.trigger);
                if (!isMultiple)
                    this.selectedElementIds.clear();
                this.selectedElementIds.add(target.id);
                this.updateNeighborSelectedElementIds(event);
            }
        }
        if (!this.selectedElementIds.size)
            return;
        const states = {};
        if (this.options.state) {
            Object.assign(states, this.getElementsState(Array.from(this.selectedElementIds), this.options.state, add));
        }
        if (this.options.neighborState && this.neighborSelectedElementIds.size > 0) {
            Object.assign(states, this.getElementsState(Array.from(this.neighborSelectedElementIds), this.options.neighborState, add));
        }
        if (this.options.unselectedState) {
            const inactiveIds = (0, id_1.idsOf)(graph.getData(), true).filter((id) => !this.selectedElementIds.has(id) && !this.neighborSelectedElementIds.has(id));
            Object.assign(states, this.getElementsState(inactiveIds, this.options.unselectedState, add));
        }
        graph.setElementState(states, this.options.animation);
    };
    updateNeighborSelectedElementIds = (event) => {
        this.neighborSelectedElementIds.clear();
        const degree = (0, util_1.isFunction)(this.options.degree) ? this.options.degree(event) : this.options.degree;
        if (degree) {
            const { targetType } = event;
            this.selectedElementIds.forEach((id) => {
                const neighborIds = (0, relation_1.getElementNthDegreeIds)(this.context.graph, targetType, id, degree);
                this.neighborSelectedElementIds = new Set([...this.neighborSelectedElementIds, ...neighborIds].filter((id) => !this.selectedElementIds.has(id)));
            });
        }
    };
    getElementsState = (ids, state, add) => {
        const { graph } = this.context;
        const states = {};
        ids.forEach((id) => {
            const currentState = graph.getElementState(id);
            const updatedState = add ? [...currentState, state] : currentState.filter((s) => s !== state);
            states[id] = updatedState;
        });
        return states;
    };
    validate(event) {
        if (this.destroyed)
            return false;
        const { enable } = this.options;
        if ((0, util_1.isFunction)(enable))
            return enable(event);
        return !!enable;
    }
    unbindEvents() {
        const { graph } = this.context;
        element_1.ELEMENT_TYPES.forEach((type) => {
            graph.off(`${type}:${constants_1.CommonEvent.CLICK}`, this.onClickSelect);
        });
        graph.off(constants_1.CanvasEvent.CLICK, this.onClickCanvas);
    }
    destroy() {
        this.unbindEvents();
        super.destroy();
    }
}
exports.ClickSelect = ClickSelect;
//# sourceMappingURL=click-select.js.map