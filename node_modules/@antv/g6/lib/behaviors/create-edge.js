"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateEdge = void 0;
const util_1 = require("@antv/util");
const constants_1 = require("../constants");
const base_behavior_1 = require("./base-behavior");
const ASSIST_EDGE_ID = 'g6-create-edge-assist-edge-id';
const ASSIST_NODE_ID = 'g6-create-edge-assist-node-id';
/**
 * <zh/> 创建边交互
 *
 * <en/> Create edge behavior
 * @remarks
 * <zh/> 通过拖拽或点击节点创建边，支持自定义边样式。
 *
 * <en/> Create edges by dragging or clicking nodes, and support custom edge styles.
 */
class CreateEdge extends base_behavior_1.BaseBehavior {
    static defaultOptions = {
        animation: true,
        enable: true,
        style: {},
        trigger: 'drag',
        onCreate: (data) => data,
        onFinish: () => { },
    };
    source;
    constructor(context, options) {
        super(context, Object.assign({}, CreateEdge.defaultOptions, options));
        this.bindEvents();
    }
    /**
     * Update options
     * @param options - The options to update
     * @internal
     */
    update(options) {
        super.update(options);
        this.bindEvents();
    }
    bindEvents() {
        const { graph } = this.context;
        const { trigger } = this.options;
        this.unbindEvents();
        if (trigger === 'click') {
            graph.on(constants_1.NodeEvent.CLICK, this.handleCreateEdge);
            graph.on(constants_1.ComboEvent.CLICK, this.handleCreateEdge);
            graph.on(constants_1.CanvasEvent.CLICK, this.cancelEdge);
            graph.on(constants_1.EdgeEvent.CLICK, this.cancelEdge);
        }
        else {
            graph.on(constants_1.NodeEvent.DRAG_START, this.handleCreateEdge);
            graph.on(constants_1.ComboEvent.DRAG_START, this.handleCreateEdge);
            graph.on(constants_1.CommonEvent.POINTER_UP, this.drop);
        }
        graph.on(constants_1.CommonEvent.POINTER_MOVE, this.updateAssistEdge);
    }
    drop = async (event) => {
        const { targetType } = event;
        if (['combo', 'node'].includes(targetType) && this.source) {
            await this.handleCreateEdge(event);
        }
        else {
            await this.cancelEdge();
        }
    };
    handleCreateEdge = async (event) => {
        if (!this.validate(event))
            return;
        const { graph, canvas } = this.context;
        const { style } = this.options;
        if (this.source) {
            this.createEdge(event);
            await this.cancelEdge();
            return;
        }
        canvas.setCursor('crosshair');
        this.source = this.getSelectedNodeIDs([event.target.id])[0];
        graph.addNodeData([
            {
                id: ASSIST_NODE_ID,
                style: {
                    visibility: 'hidden',
                    ports: [{ key: 'port-1', placement: [0.5, 0.5] }],
                },
            },
        ]);
        graph.addEdgeData([
            {
                id: ASSIST_EDGE_ID,
                source: this.source,
                target: ASSIST_NODE_ID,
                style: {
                    pointerEvents: 'none',
                    ...style,
                },
            },
        ]);
    };
    updateAssistEdge = async (event) => {
        if (!this.source)
            return;
        const { model, element } = this.context;
        model.translateNodeTo(ASSIST_NODE_ID, [event.canvas.x, event.canvas.y]);
        await element.draw({ animation: false, silence: true })?.finished;
    };
    createEdge = (event) => {
        const { graph } = this.context;
        const { style, onFinish, onCreate } = this.options;
        const targetId = event.target?.id;
        if (targetId === undefined || this.source === undefined)
            return;
        const target = this.getSelectedNodeIDs([event.target.id])?.[0];
        const id = `${this.source}-${target}-${(0, util_1.uniqueId)()}`;
        const edgeData = onCreate({ id, source: this.source, target, style });
        graph.addEdgeData([edgeData]);
        onFinish(edgeData);
    };
    cancelEdge = async () => {
        if (!this.source)
            return;
        const { graph, element, canvas } = this.context;
        canvas.setCursor('default');
        graph.removeNodeData([ASSIST_NODE_ID]);
        this.source = undefined;
        await element.draw({ animation: false, silence: true })?.finished;
    };
    getSelectedNodeIDs(currTarget) {
        return Array.from(new Set(this.context.graph
            .getElementDataByState('node', this.options.state)
            .map((node) => node.id)
            .concat(currTarget)));
    }
    validate(event) {
        if (this.destroyed)
            return false;
        const { enable } = this.options;
        if ((0, util_1.isFunction)(enable))
            return enable(event);
        return !!enable;
    }
    unbindEvents() {
        const { graph } = this.context;
        graph.off(constants_1.NodeEvent.CLICK, this.handleCreateEdge);
        graph.off(constants_1.ComboEvent.CLICK, this.handleCreateEdge);
        graph.off(constants_1.CanvasEvent.CLICK, this.cancelEdge);
        graph.off(constants_1.EdgeEvent.CLICK, this.cancelEdge);
        graph.off(constants_1.NodeEvent.DRAG_START, this.handleCreateEdge);
        graph.off(constants_1.ComboEvent.DRAG_START, this.handleCreateEdge);
        graph.off(constants_1.CommonEvent.POINTER_UP, this.drop);
        graph.off(constants_1.CommonEvent.POINTER_MOVE, this.updateAssistEdge);
    }
    destroy() {
        this.unbindEvents();
        super.destroy();
    }
}
exports.CreateEdge = CreateEdge;
//# sourceMappingURL=create-edge.js.map