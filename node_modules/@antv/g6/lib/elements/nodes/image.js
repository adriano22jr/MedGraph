"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Image = void 0;
const g_1 = require("@antv/g");
const element_1 = require("../../constants/element");
const prefix_1 = require("../../utils/prefix");
const style_1 = require("../../utils/style");
const vector_1 = require("../../utils/vector");
const base_node_1 = require("./base-node");
/**
 * <zh/> 图片节点
 *
 * <en/> Image node
 */
class Image extends base_node_1.BaseNode {
    static defaultStyleProps = {
        size: 32,
    };
    constructor(options) {
        super((0, style_1.mergeOptions)({ style: Image.defaultStyleProps }, options));
    }
    getKeyStyle(attributes) {
        const [width, height] = this.getSize(attributes);
        const { fillOpacity, opacity = fillOpacity, ...keyStyle } = super.getKeyStyle(attributes);
        return {
            opacity,
            ...keyStyle,
            width,
            height,
            x: -width / 2,
            y: -height / 2,
        };
    }
    getHaloStyle(attributes) {
        if (attributes.halo === false)
            return false;
        const { fill: keyStyleFill, stroke: keyStyleStroke, ...keyStyle } = this.getKeyStyle(attributes);
        const haloStyle = (0, prefix_1.subStyleProps)(this.getGraphicStyle(attributes), 'halo');
        const haloLineWidth = Number(haloStyle.lineWidth);
        const [width, height] = (0, vector_1.add)(this.getSize(attributes), [haloLineWidth, haloLineWidth]);
        const fill = 'transparent';
        return { ...keyStyle, ...haloStyle, width, height, fill, x: -width / 2, y: -height / 2 };
    }
    getIconStyle(attributes) {
        const style = super.getIconStyle(attributes);
        const [width, height] = this.getSize(attributes);
        return style
            ? {
                width: width * element_1.ICON_SIZE_RATIO,
                height: height * element_1.ICON_SIZE_RATIO,
                ...style,
            }
            : false;
    }
    drawKeyShape(attributes, container) {
        return this.upsert('key', g_1.Image, this.getKeyStyle(attributes), container);
    }
    drawHaloShape(attributes, container) {
        this.upsert('halo', g_1.Rect, this.getHaloStyle(attributes), container);
    }
}
exports.Image = Image;
//# sourceMappingURL=image.js.map