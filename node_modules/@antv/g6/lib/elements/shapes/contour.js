"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Contour = void 0;
const g_1 = require("@antv/g");
const polygon_1 = require("../../utils/polygon");
const prefix_1 = require("../../utils/prefix");
const style_1 = require("../../utils/style");
const text_1 = require("../../utils/text");
const base_shape_1 = require("./base-shape");
const label_1 = require("./label");
class Contour extends base_shape_1.BaseShape {
    static defaultStyleProps = {
        label: true,
        labelPlacement: 'bottom',
        labelCloseToPath: true,
        labelAutoRotate: true,
        labelOffsetX: 0,
        labelOffsetY: 0,
    };
    constructor(options) {
        super((0, style_1.mergeOptions)({ style: Contour.defaultStyleProps }, options));
    }
    getLabelStyle(attributes) {
        if (!attributes.label || !attributes.d || attributes.d.length === 0)
            return false;
        const { maxWidth, offsetX, offsetY, autoRotate, placement, closeToPath, ...labelStyle } = (0, prefix_1.subStyleProps)(this.getGraphicStyle(attributes), 'label');
        const key = this.shapeMap.key;
        const keyBounds = key?.getRenderBounds();
        return Object.assign((0, polygon_1.getPolygonTextStyleByPlacement)(keyBounds, placement, offsetX, offsetY, closeToPath, attributes.d, autoRotate), { wordWrapWidth: (0, text_1.getWordWrapWidthByBox)(keyBounds, maxWidth) }, labelStyle);
    }
    getKeyStyle(attributes) {
        return this.getGraphicStyle(attributes);
    }
    render(attributes, container) {
        this.upsert('key', g_1.Path, this.getKeyStyle(attributes), container);
        this.upsert('label', label_1.Label, this.getLabelStyle(attributes), container);
    }
}
exports.Contour = Contour;
//# sourceMappingURL=contour.js.map