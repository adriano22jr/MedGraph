import type { BaseStyleProps, DisplayObject, DisplayObjectConfig, Group, IAnimation } from '@antv/g';
import { CustomElement } from '@antv/g';
import type { Keyframe } from '../../types';
export interface BaseShapeStyleProps extends BaseStyleProps {
}
export declare abstract class BaseShape<StyleProps extends BaseShapeStyleProps> extends CustomElement<StyleProps> {
    constructor(options: DisplayObjectConfig<StyleProps>);
    protected get parsedAttributes(): Required<StyleProps>;
    /**
     * <zh> 图形实例映射表
     *
     * <en> shape instance map
     */
    protected shapeMap: Record<string, DisplayObject>;
    /**
     * <zh> 动画实例映射表
     *
     * <en> animation instance map
     */
    protected animateMap: Record<string, IAnimation>;
    /**
     * <zh> 创建、更新或删除图形
     *
     * <en> create, update or remove shape
     * @param className - <zh> 图形名称 | <en> shape name
     * @param Ctor - <zh> 图形类型 | <en> shape type
     * @param style - <zh> 图形样式 | <en> shape style
     * @param container - <zh> 容器 | <en> container
     * @returns <zh> 图形实例 | <en> shape instance
     */
    protected upsert<T extends DisplayObject>(className: string, Ctor: {
        new (...args: any[]): T;
    }, style: T['attributes'] | false, container: DisplayObject): T | undefined;
    update(attr?: Partial<StyleProps>): void;
    /**
     * <zh> 在初始化时会被自动调用
     *
     * <en> will be called automatically when initializing
     * @param attributes
     * @param container
     */
    abstract render(attributes: Required<StyleProps>, container: Group): void;
    bindEvents(): void;
    /**
     * <zh/> 从给定的属性对象中提取图形样式属性。删除特定的属性，如位置、变换和类名
     *
     * <en/> Extracts the graphic style properties from a given attribute object.
     * Removes specific properties like position, transformation, and class name.
     * @param attributes - <zh/> 属性对象 | <en/> attribute object
     * @returns <zh/> 仅包含样式属性的对象 | <en/> An object containing only the style properties.
     */
    getGraphicStyle<T extends Record<string, any>>(attributes: T): Omit<T, 'x' | 'y' | 'z' | 'transform' | 'transformOrigin' | 'className' | 'class' | 'context' | 'zIndex'>;
    /**
     * Get the prefix pairs for composite shapes used to handle animation
     * @returns tuples array where each tuple contains a key corresponding to a method `get${key}Style` and its shape prefix
     */
    protected get compositeShapes(): [string, string][];
    protected hostingAnimation: boolean;
    animate(keyframes: Keyframe[], options?: number | KeyframeAnimationOptions): IAnimation | null;
    getShape<T extends DisplayObject>(name: string): T;
    private setVisibility;
    destroy(): void;
}
