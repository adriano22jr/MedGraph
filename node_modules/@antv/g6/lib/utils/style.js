"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeOptions = exports.zIndexOf = exports.computeElementCallbackStyle = void 0;
const util_1 = require("@antv/util");
const animation_1 = require("./animation");
/**
 * <zh/> 计算支持回调的动态样式
 *
 * <en/> compute dynamic style that supports callback
 * @param callableStyle - <zh/> 动态样式 | <en/> dynamic style
 * @param context - <zh/> 样式计算迭代上下文 | <en/> style iteration context
 * @returns <zh/> 静态样式 | <en/> static style
 */
function computeElementCallbackStyle(callableStyle, context) {
    const { datum } = context;
    if ((0, util_1.isFunction)(callableStyle))
        return callableStyle(datum);
    return Object.fromEntries(Object.entries(callableStyle).map(([key, style]) => {
        if ((0, util_1.isFunction)(style))
            return [key, style(datum)];
        return [key, style];
    }));
}
exports.computeElementCallbackStyle = computeElementCallbackStyle;
/**
 * <zh/> 获取元素的 z-index
 *
 * <en/> Get the z-index of the element
 * @param datum - <zh/> 元素数据 | <en/> element data
 * @returns <zh/> z-index | <en/> z-index
 */
function zIndexOf(datum) {
    return datum.style?.zIndex ?? (0, animation_1.inferDefaultValue)('zIndex') ?? 0;
}
exports.zIndexOf = zIndexOf;
/**
 * <zh/> 合并图形配置项
 *
 * <en/> Merge graphic configuration
 * @param opt1 - <zh/> 配置项1 | <en/> configuration 1
 * @param opt2 - <zh/> 配置项2 | <en/> configuration 2
 * @returns <zh/> 合并后的配置项 | <en/> merged configuration
 */
function mergeOptions(opt1, opt2) {
    const s1 = opt1?.style || {};
    const s2 = opt2?.style || {};
    return Object.assign({}, opt1, opt2, {
        style: Object.assign({}, s1, s2),
    });
}
exports.mergeOptions = mergeOptions;
//# sourceMappingURL=style.js.map