"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Shortcut = void 0;
const util_1 = require("@antv/util");
const constants_1 = require("../constants");
const lowerCaseKeys = (keys) => keys.map((key) => ((0, util_1.isString)(key) ? key.toLocaleLowerCase() : key));
class Shortcut {
    map = new Map();
    emitter;
    recordKey = new Set();
    constructor(emitter) {
        this.emitter = emitter;
        this.bindEvents();
    }
    bind(key, handler) {
        if (key.length === 0)
            return;
        this.map.set(key, handler);
    }
    unbind(key, handler) {
        this.map.forEach((h, k) => {
            if ((0, util_1.isEqual)(k, key)) {
                if (!handler || handler === h)
                    this.map.delete(k);
            }
        });
    }
    unbindAll() {
        this.map.clear();
    }
    match(key) {
        // 排序
        const recordKeyList = lowerCaseKeys(Array.from(this.recordKey)).sort();
        const keyList = lowerCaseKeys(key).sort();
        return (0, util_1.isEqual)(recordKeyList, keyList);
    }
    bindEvents() {
        const { emitter } = this;
        emitter.on(constants_1.CommonEvent.KEY_DOWN, this.onKeyDown);
        emitter.on(constants_1.CommonEvent.KEY_UP, this.onKeyUp);
        emitter.on(constants_1.CommonEvent.WHEEL, this.onWheel);
        emitter.on(constants_1.CommonEvent.DRAG, this.onDrag);
    }
    onKeyDown = (event) => {
        if (!event?.key)
            return;
        this.recordKey.add(event.key);
        this.trigger(event);
    };
    onKeyUp = (event) => {
        if (!event?.key)
            return;
        this.recordKey.delete(event.key);
    };
    trigger(event) {
        this.map.forEach((handler, key) => {
            if (this.match(key))
                handler(event);
        });
    }
    /**
     * <zh/> 扩展 wheel, drag 操作
     *
     * <en/> Extend wheel, drag operations
     * @param eventType - event name
     * @param event - event
     */
    triggerExtendKey(eventType, event) {
        this.map.forEach((handler, key) => {
            if (key.includes(eventType)) {
                if ((0, util_1.isEqual)(Array.from(this.recordKey), key.filter((k) => k !== eventType))) {
                    handler(event);
                }
            }
        });
    }
    onWheel = (event) => {
        this.triggerExtendKey(constants_1.CommonEvent.WHEEL, event);
    };
    onDrag = (event) => {
        this.triggerExtendKey(constants_1.CommonEvent.DRAG, event);
    };
    destroy() {
        this.unbindAll();
        this.emitter.off(constants_1.CommonEvent.KEY_DOWN, this.onKeyDown);
        this.emitter.off(constants_1.CommonEvent.KEY_UP, this.onKeyUp);
        this.emitter.off(constants_1.CommonEvent.WHEEL, this.onWheel);
        this.emitter.off(constants_1.CommonEvent.DRAG, this.onDrag);
    }
}
exports.Shortcut = Shortcut;
//# sourceMappingURL=shortcut.js.map