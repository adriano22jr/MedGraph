"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLayoutProperty = exports.invokeLayoutMethod = exports.layoutAdapter = exports.layoutMapping2GraphData = exports.isPositionSpecified = exports.isTreeLayout = exports.isComboLayout = void 0;
const graphlib_1 = require("@antv/graphlib");
const util_1 = require("@antv/util");
const constants_1 = require("../constants");
const base_layout_1 = require("../layouts/base-layout");
const id_1 = require("./id");
const point_1 = require("./point");
/**
 * <zh/> 判断是否是 combo 布局
 *
 * <en/> Determine if it is a combo layout
 * @param options - <zh/> 布局配置项 | <en/> Layout options
 * @returns <zh/> 是否是 combo 布局 | <en/> Whether it is a combo layout
 */
function isComboLayout(options) {
    const { type } = options;
    if (['comboCombined', 'comboForce'].includes(type))
        return true;
    if (type === 'antv-dagre' && options.sortByCombo)
        return true;
    return false;
}
exports.isComboLayout = isComboLayout;
/**
 * <zh/> 判断是否是树图布局
 *
 * <en/> Determine if it is a tree layout
 * @param options - <zh/> 布局配置项 | <en/> Layout options
 * @returns <zh/> 是否是树图布局 | <en/> Whether it is a tree layout
 */
function isTreeLayout(options) {
    const { type } = options;
    return ['compact-box', 'mindmap', 'dendrogram', 'indented'].includes(type);
}
exports.isTreeLayout = isTreeLayout;
/**
 * <zh/> 数据中是否指定了位置
 *
 * <en/> Is the position specified in the data
 * @param data - <zh/> 数据 | <en/> Data
 * @returns <zh/> 是否指定了位置 | <en/> Is the position specified
 */
function isPositionSpecified(data) {
    return (0, util_1.isNumber)(data.x) && (0, util_1.isNumber)(data.y);
}
exports.isPositionSpecified = isPositionSpecified;
/**
 * <zh/> 将图布局结果转换为 G6 数据
 *
 * <en/> Convert the layout result to G6 data
 * @param layoutMapping - <zh/> 布局映射 | <en/> Layout mapping
 * @returns <zh/> G6 数据 | <en/> G6 data
 */
function layoutMapping2GraphData(layoutMapping) {
    const { nodes, edges } = layoutMapping;
    const data = { nodes: [], edges: [], combos: [] };
    nodes.forEach((nodeLike) => {
        const target = nodeLike.data._isCombo ? data.combos : data.nodes;
        const { x, y, z = 0 } = nodeLike.data;
        target?.push({
            id: nodeLike.id,
            style: { x, y, z },
        });
    });
    edges.forEach((edge) => {
        const { id, source, target, data: { points = [], controlPoints = points.slice(1, points.length - 1) }, } = edge;
        data.edges.push({
            id: id,
            source: source,
            target: target,
            style: {
                /**
                 * antv-dagre 返回 controlPoints，dagre 返回 points
                 * antv-dagre returns controlPoints, dagre returns points
                 */
                ...(controlPoints?.length ? { controlPoints: controlPoints.map(point_1.parsePoint) } : {}),
            },
        });
    });
    return data;
}
exports.layoutMapping2GraphData = layoutMapping2GraphData;
/**
 * <zh/> 将 @antv/layout 布局适配为 G6 布局
 *
 * <en/> Adapt @antv/layout layout to G6 layout
 * @param Ctor - <zh/> 布局类 | <en/> Layout class
 * @param context - <zh/> 运行时上下文 | <en/> Runtime context
 * @returns <zh/> G6 布局类 | <en/> G6 layout class
 */
function layoutAdapter(Ctor, context) {
    class AdaptLayout extends base_layout_1.BaseLayout {
        instance;
        id;
        constructor(options) {
            super(options);
            this.instance = new Ctor();
            this.id = this.instance.id;
            if ('stop' in this.instance && 'tick' in this.instance) {
                const instance = this.instance;
                this.stop = instance.stop.bind(instance);
                this.tick = (iterations) => {
                    const tickResult = instance.tick(iterations);
                    return layoutMapping2GraphData(tickResult);
                };
            }
        }
        async execute(model, options) {
            return layoutMapping2GraphData(await this.instance.execute(this.graphData2LayoutModel(model), this.transformOptions((0, util_1.deepMix)({}, this.options, options))));
        }
        transformOptions(options) {
            const { onTick } = options;
            if (!onTick)
                return options;
            options.onTick = (data) => onTick(layoutMapping2GraphData(data));
            return options;
        }
        graphData2LayoutModel(data) {
            const { nodes = [], edges = [], combos = [] } = data;
            const nodesToLayout = nodes.map((datum) => {
                const id = (0, id_1.idOf)(datum);
                const { data, style, combo } = datum;
                return {
                    id,
                    data: {
                        ...data,
                        // antv-dagre 会读取 data.parentId
                        // antv-dagre will read data.parentId
                        ...(combo ? { parentId: combo } : {}),
                    },
                    style: { ...style },
                };
            });
            const nodesIdMap = new Map(nodesToLayout.map((node) => [node.id, node]));
            const edgesToLayout = edges
                .filter((edge) => {
                const { source, target } = edge;
                return nodesIdMap.has(source) && nodesIdMap.has(target);
            })
                .map((edge) => {
                const { source, target, data, style } = edge;
                return { id: (0, id_1.idOf)(edge), source, target, data: { ...data }, style: { ...style } };
            });
            const combosToLayout = combos.map((combo) => {
                return { id: (0, id_1.idOf)(combo), data: { _isCombo: true, ...combo.data }, style: { ...combo.style } };
            });
            const layoutModel = new graphlib_1.Graph({
                nodes: [...nodesToLayout, ...combosToLayout],
                edges: edgesToLayout,
            });
            if (context.model.model.hasTreeStructure(constants_1.COMBO_KEY)) {
                layoutModel.attachTreeStructure(constants_1.COMBO_KEY);
                // 同步层级关系 / Synchronize hierarchical relationships
                nodesToLayout.forEach((node) => {
                    const parent = context.model.model.getParent(node.id, constants_1.COMBO_KEY);
                    if (parent && layoutModel.hasNode(parent.id)) {
                        layoutModel.setParent(node.id, parent.id, constants_1.COMBO_KEY);
                    }
                });
            }
            return layoutModel;
        }
    }
    return AdaptLayout;
}
exports.layoutAdapter = layoutAdapter;
/**
 * <zh/> 调用布局成员方法
 *
 * <en/> Call layout member methods
 * @description
 * <zh/> 提供一种通用的调用方式来调用 G6 布局和 \@antv/layout 布局上的方法
 *
 * <en/> Provide a common way to call methods on G6 layout and \@antv/layout layout
 * @param layout - <zh/> 布局实例 | <en/> Layout instance
 * @param method - <zh/> 方法名 | <en/> Method name
 * @param args - <zh/> 参数 | <en/> Arguments
 * @returns <zh/> 返回值 | <en/> Return value
 */
function invokeLayoutMethod(layout, method, ...args) {
    if (method in layout) {
        return layout[method](...args);
    }
    // invoke AdaptLayout method
    if ('instance' in layout) {
        const instance = layout.instance;
        if (method in instance)
            return instance[method](...args);
    }
    return null;
}
exports.invokeLayoutMethod = invokeLayoutMethod;
/**
 * <zh/> 获取布局成员属性
 *
 * <en/> Get layout member properties
 * @param layout - <zh/> 布局实例 | <en/> Layout instance
 * @param name - <zh/> 属性名 | <en/> Property name
 * @returns <zh/> 返回值 | <en/> Return value
 */
function getLayoutProperty(layout, name) {
    if (name in layout)
        return layout[name];
    if ('instance' in layout) {
        const instance = layout.instance;
        if (name in instance)
            return instance[name];
    }
    return null;
}
exports.getLayoutProperty = getLayoutProperty;
//# sourceMappingURL=layout.js.map