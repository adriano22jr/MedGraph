"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reassignTo = exports.replaceTranslateInTransform = void 0;
const util_1 = require("@antv/util");
const id_1 = require("./id");
/**
 * <zh/> 从 transform 字符串中替换 translate 部分
 *
 * <en/> replace the translate part from the transform string
 * @param x - <zh/> x | <en/> x
 * @param y - <zh/> y | <en/> y
 * @param z - <zh/> z | <en/> z
 * @param transform - <zh/> transform 字符串 | <en/> transform string
 * @returns <zh/> 替换后的 transform 字符串 | <en/> replaced transform string
 */
function replaceTranslateInTransform(x, y, z, transform) {
    const removedTranslate = transform ? transform.replace(/translate(3d)?\([^)]*\)/g, '') : '';
    if (z === 0) {
        return `translate(${x}, ${y})${removedTranslate}`;
    }
    else {
        return `translate3d(${x}, ${y}, ${z})${removedTranslate}`;
    }
}
exports.replaceTranslateInTransform = replaceTranslateInTransform;
/**
 * <zh/> 重新分配绘制任务
 *
 * <en/> Reassign drawing tasks
 * @param input - <zh>绘制数据 | <en>DrawData
 * @param type - <zh>类型 | <en>type
 * @param elementType - <zh>元素类型 | <en>element type
 * @param datum - <zh>数据 | <en>data
 * @param merge - <zh>是否合并 | <en>whether to merge
 */
const reassignTo = (input, type, elementType, datum, merge = false) => {
    const id = (0, id_1.idOf)(datum);
    const typeName = `${elementType}s`;
    const exitsDatum = input.add[typeName].get(id) || input.update[typeName].get(id) || input.remove[typeName].get(id) || datum;
    Object.entries(input).forEach(([_type, value]) => {
        if (type === _type)
            value[typeName].set(id, merge ? (0, util_1.deepMix)(exitsDatum, datum) : exitsDatum);
        else
            value[typeName].delete(id);
    });
};
exports.reassignTo = reassignTo;
//# sourceMappingURL=transform.js.map