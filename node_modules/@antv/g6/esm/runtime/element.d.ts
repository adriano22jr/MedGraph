import type { BaseStyleProps } from '@antv/g';
import type { AnimationStage } from '../spec/element/animation';
import type { Combo, Element, ElementDatum, ElementType, ID, Node, State } from '../types';
import type { RuntimeContext } from './types';
export declare class ElementController {
    private context;
    private container;
    private elementMap;
    private shapeTypeMap;
    constructor(context: RuntimeContext);
    init(): void;
    private emit;
    private forEachElementData;
    getElementType(elementType: ElementType, datum: ElementDatum): string;
    private getTheme;
    getThemeStyle(elementType: ElementType): import("../spec/element/node").NodeStyle | import("../spec/element/edge").EdgeStyle | import("../spec/element/combo").ComboStyle;
    getThemeStateStyle(elementType: ElementType, states: State[]): any;
    private paletteStyle;
    private computePaletteStyle;
    getPaletteStyle(elementType: ElementType, id: ID): BaseStyleProps;
    private defaultStyle;
    /**
     * <zh/> 计算单个元素的默认样式
     *
     * <en/> compute default style of single element
     */
    private computeElementDefaultStyle;
    private computeElementsDefaultStyle;
    getDefaultStyle(id: ID): Record<string, unknown>;
    private getElementState;
    private stateStyle;
    /**
     * <zh/> 获取单个元素的单个状态的样式
     *
     * <en/> get single state style of single element
     */
    private getElementStateStyle;
    /**
     * <zh/> 计算单个元素的合并状态样式
     *
     * <en/> compute merged state style of single element
     */
    private computeElementStatesStyle;
    /**
     * <zh/> 计算全部元素的状态样式
     *
     * <en/> compute state style of all elements
     * @param ids - <zh/> 计算指定元素的状态样式 | <en/> compute state style of specified elements
     */
    private computeElementsStatesStyle;
    getStateStyle(id: ID): Record<string, unknown>;
    private computeStyle;
    getElement<T extends Element>(id: ID): T | undefined;
    getNodes(): Node[];
    getEdges(): import("..").BaseEdge[];
    getCombos(): Combo[];
    getElementComputedStyle(elementType: ElementType, datum: ElementDatum): any;
    /**
     * <zh/> 开始绘制流程
     *
     * <en/> start render process
     */
    draw(context?: DrawContext): import("@antv/g").IAnimation | null;
    private computeChangesAndDrawData;
    private transformData;
    private createElement;
    private createElements;
    private updateElement;
    private updateElements;
    private destroyElement;
    private destroyElements;
    private clearElement;
    /**
     * <zh/> 收起节点
     *
     * <en/> collapse node
     * @param id - <zh/> 元素 ID | <en/> element ID
     * @param animation - <zh/> 是否使用动画，默认为 true | <en/> Whether to use animation, default is true
     */
    collapseNode(id: ID, animation: boolean): Promise<void>;
    /**
     * <zh/> 展开节点
     *
     * <en/> expand node
     * @param id - <zh/> 元素 ID | <en/> element ID
     * @param animation - <zh/> 是否使用动画，默认为 true | <en/> Whether to use animation, default is true
     */
    expandNode(id: ID, animation: boolean): Promise<void>;
    collapseCombo(id: ID, animation: boolean): Promise<void>;
    expandCombo(id: ID, animation: boolean): Promise<void>;
    destroy(): void;
}
export interface DrawContext {
    /** <zh/> 是否使用动画，默认为 true | <en/> Whether to use animation, default is true */
    animation: boolean;
    /** <zh/> 当前绘制阶段 | <en/> Current draw stage */
    stage?: AnimationStage;
    /** <zh/> 是否不抛出事件 | <en/> Whether not to throw events */
    silence?: boolean;
    /** <zh/> 收起/展开的对象 ID | <en/> ID of the object to collapse/expand */
    collapseExpandTarget?: ID;
}
