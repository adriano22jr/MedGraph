import { getBBoxHeight, getBBoxWidth, getNodeBBox } from '../../utils/bbox';
import { getPolylineLoopPath, getPolylinePath } from '../../utils/edge';
import { findPorts, getConnectionPoint, getPortPosition } from '../../utils/element';
import { subStyleProps } from '../../utils/prefix';
import { orth } from '../../utils/router/orth';
import { mergeOptions } from '../../utils/style';
import { BaseEdge } from './base-edge';
/**
 * <zh/> 折线
 *
 * <en/> Polyline
 */
export class Polyline extends BaseEdge {
    static defaultStyleProps = {
        radius: 0,
        controlPoints: [],
        router: false,
        routerName: 'orth',
        routerPadding: 10,
    };
    constructor(options) {
        super(mergeOptions({ style: Polyline.defaultStyleProps }, options));
    }
    getKeyPath(attributes) {
        const { radius } = attributes;
        const { sourceNode, targetNode } = this;
        // 1. 获取连接点（若有连接桩，取连接桩中心；反之，取节点中心）和连接桩 | Get connection points (if port, take port center; otherwise, take node center) and ports
        const { sourcePoint, targetPoint, sourcePort, targetPort } = this.getEndpointsAndPorts(attributes);
        // 2. 计算控制点 | Calculate control points
        const controlPoints = this.getControlPoints(attributes, sourcePoint, targetPoint);
        // 3. 计算实际的连接点 | Calculate the actual connection points
        const newSourcePoint = getConnectionPoint(sourcePort || sourceNode, controlPoints[0] || targetPort || targetNode);
        const newTargetPoint = getConnectionPoint(targetPort || targetNode, controlPoints[controlPoints.length - 1] || sourcePort || sourceNode);
        // 4. 获取路径 | Get the path
        return getPolylinePath([newSourcePoint, ...controlPoints, newTargetPoint], radius);
    }
    getEndpointsAndPorts(attributes) {
        const { sourcePort: sourcePortKey, targetPort: targetPortKey } = attributes;
        const { sourceNode, targetNode } = this;
        const [sourcePort, targetPort] = findPorts(sourceNode, targetNode, sourcePortKey, targetPortKey);
        return {
            sourcePoint: sourcePort ? getPortPosition(sourcePort) : sourceNode.getCenter(),
            targetPoint: targetPort ? getPortPosition(targetPort) : targetNode.getCenter(),
            sourcePort,
            targetPort,
        };
    }
    getControlPoints(attributes, sourcePoint, targetPoint) {
        const { controlPoints, router, routerPadding } = attributes;
        const { sourceNode, targetNode } = this;
        if (!router)
            return [...controlPoints];
        const sourceBBox = getNodeBBox(sourceNode, routerPadding);
        const targetBBox = getNodeBBox(targetNode, routerPadding);
        return orth(sourcePoint, targetPoint, sourceBBox, targetBBox, controlPoints, routerPadding);
    }
    getLoopPath(attributes) {
        const { sourcePort: sourcePortKey, targetPort: targetPortKey, radius } = attributes;
        const node = this.sourceNode;
        const bbox = getNodeBBox(node);
        // 默认转折点距离为 bbox 的最大宽高的 1/4 | Default distance of the turning point is 1/4 of the maximum width and height of the bbox
        const defaultDist = Math.max(getBBoxWidth(bbox), getBBoxHeight(bbox)) / 4;
        const { placement, clockwise, dist = defaultDist, } = subStyleProps(this.getGraphicStyle(attributes), 'loop');
        return getPolylineLoopPath(node, radius, placement, clockwise, dist, sourcePortKey, targetPortKey);
    }
}
//# sourceMappingURL=polyline.js.map