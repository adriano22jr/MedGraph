import { Image as GImage, Rect as GRect } from '@antv/g';
import { ICON_SIZE_RATIO } from '../../constants/element';
import { subStyleProps } from '../../utils/prefix';
import { mergeOptions } from '../../utils/style';
import { add } from '../../utils/vector';
import { BaseNode } from './base-node';
/**
 * <zh/> 图片节点
 *
 * <en/> Image node
 */
export class Image extends BaseNode {
    static defaultStyleProps = {
        size: 32,
    };
    constructor(options) {
        super(mergeOptions({ style: Image.defaultStyleProps }, options));
    }
    getKeyStyle(attributes) {
        const [width, height] = this.getSize(attributes);
        const { fillOpacity, opacity = fillOpacity, ...keyStyle } = super.getKeyStyle(attributes);
        return {
            opacity,
            ...keyStyle,
            width,
            height,
            x: -width / 2,
            y: -height / 2,
        };
    }
    getHaloStyle(attributes) {
        if (attributes.halo === false)
            return false;
        const { fill: keyStyleFill, stroke: keyStyleStroke, ...keyStyle } = this.getKeyStyle(attributes);
        const haloStyle = subStyleProps(this.getGraphicStyle(attributes), 'halo');
        const haloLineWidth = Number(haloStyle.lineWidth);
        const [width, height] = add(this.getSize(attributes), [haloLineWidth, haloLineWidth]);
        const fill = 'transparent';
        return { ...keyStyle, ...haloStyle, width, height, fill, x: -width / 2, y: -height / 2 };
    }
    getIconStyle(attributes) {
        const style = super.getIconStyle(attributes);
        const [width, height] = this.getSize(attributes);
        return style
            ? {
                width: width * ICON_SIZE_RATIO,
                height: height * ICON_SIZE_RATIO,
                ...style,
            }
            : false;
    }
    drawKeyShape(attributes, container) {
        return this.upsert('key', GImage, this.getKeyStyle(attributes), container);
    }
    drawHaloShape(attributes, container) {
        this.upsert('halo', GRect, this.getHaloStyle(attributes), container);
    }
}
//# sourceMappingURL=image.js.map