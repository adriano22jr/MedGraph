import { Path } from '@antv/g';
import { getPolygonTextStyleByPlacement } from '../../utils/polygon';
import { subStyleProps } from '../../utils/prefix';
import { mergeOptions } from '../../utils/style';
import { getWordWrapWidthByBox } from '../../utils/text';
import { BaseShape } from './base-shape';
import { Label } from './label';
export class Contour extends BaseShape {
    static defaultStyleProps = {
        label: true,
        labelPlacement: 'bottom',
        labelCloseToPath: true,
        labelAutoRotate: true,
        labelOffsetX: 0,
        labelOffsetY: 0,
    };
    constructor(options) {
        super(mergeOptions({ style: Contour.defaultStyleProps }, options));
    }
    getLabelStyle(attributes) {
        if (!attributes.label || !attributes.d || attributes.d.length === 0)
            return false;
        const { maxWidth, offsetX, offsetY, autoRotate, placement, closeToPath, ...labelStyle } = subStyleProps(this.getGraphicStyle(attributes), 'label');
        const key = this.shapeMap.key;
        const keyBounds = key?.getRenderBounds();
        return Object.assign(getPolygonTextStyleByPlacement(keyBounds, placement, offsetX, offsetY, closeToPath, attributes.d, autoRotate), { wordWrapWidth: getWordWrapWidthByBox(keyBounds, maxWidth) }, labelStyle);
    }
    getKeyStyle(attributes) {
        return this.getGraphicStyle(attributes);
    }
    render(attributes, container) {
        this.upsert('key', Path, this.getKeyStyle(attributes), container);
        this.upsert('label', Label, this.getLabelStyle(attributes), container);
    }
}
//# sourceMappingURL=contour.js.map