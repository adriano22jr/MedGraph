import { Tooltip as TooltipComponent } from '@antv/component';
import { get } from '@antv/util';
import { BasePlugin } from './base-plugin';
export class Tooltip extends BasePlugin {
    static defaultOptions = {
        trigger: 'hover',
        position: 'top-right',
        enterable: false,
        enable: true,
        offset: [10, 10],
        style: {
            '.tooltip': {
                visibility: 'hidden',
            },
        },
    };
    currentTarget = null;
    tooltipElement = null;
    container = null;
    constructor(context, options) {
        super(context, Object.assign({}, Tooltip.defaultOptions, options));
        this.render();
        this.bindEvents();
    }
    /**
     * <zh/> 获取事件及处理事件的方法
     *
     * <en/> Get event and handle event methods
     * @returns <zh/> 事件及处理事件的方法 | <en/> Event and handling event methods
     */
    getEvents() {
        if (this.options.trigger === 'click') {
            return {
                'node:click': this.onClick,
                'edge:click': this.onClick,
                'combo:click': this.onClick,
                'canvas:click': this.onPointerLeave,
                contextmenu: this.onPointerLeave,
                drag: this.onPointerLeave,
            };
        }
        return {
            'node:pointerenter': this.onPointerEnter,
            'node:pointermove': this.onPointerMove,
            'canvas:pointermove': this.onCanvasMove,
            'edge:pointerenter': this.onPointerEnter,
            'edge:pointermove': this.onPointerMove,
            'combo:pointerenter': this.onPointerEnter,
            'combo:pointermove': this.onPointerMove,
            contextmenu: this.onPointerLeave,
            'node:drag': this.onPointerLeave,
        };
    }
    /**
     * <zh/> 更新tooltip配置
     *
     * <en/> Update the tooltip configuration
     * @param options - <zh/> 配置项 | <en/> options
     * @internal
     */
    update(options) {
        this.unbindEvents();
        super.update(options);
        if (this.tooltipElement) {
            this.container?.removeChild(this.tooltipElement.HTMLTooltipElement);
        }
        this.tooltipElement = this.initTooltip();
        this.bindEvents();
    }
    render() {
        const { canvas } = this.context;
        const $container = canvas.getContainer();
        if (!$container)
            return;
        this.container = $container;
        this.tooltipElement = this.initTooltip();
    }
    unbindEvents() {
        const { graph } = this.context;
        /** The previous event binding needs to be removed when updating the trigger. */
        const events = this.getEvents();
        Object.keys(events).forEach((eventName) => {
            graph.off(eventName, events[eventName]);
        });
    }
    bindEvents() {
        const { graph } = this.context;
        const events = this.getEvents();
        Object.keys(events).forEach((eventName) => {
            graph.on(eventName, events[eventName]);
        });
    }
    isEnable = (event) => {
        const { enable } = this.options;
        if (typeof enable === 'function') {
            return enable(event);
        }
        return enable;
    };
    /**
     * <zh/> 点击事件
     *
     * <en/> Click event
     * @param event - <zh/> 元素 | <en/> element
     */
    onClick = (event) => {
        const { target: { id }, } = event;
        // click the same item twice, tooltip will be hidden
        if (this.currentTarget === id) {
            this.currentTarget = null;
            this.hide(event);
        }
        else {
            this.currentTarget = id;
            this.show(event);
        }
    };
    /**
     * <zh/> 在目标元素(node/edge/combo)上移动
     *
     * <en/> Move on target element (node/edge/combo)
     * @param event - <zh/> 目标元素 | <en/> target element
     */
    onPointerMove = (event) => {
        const { target } = event;
        if (!this.currentTarget || target.id === this.currentTarget) {
            return;
        }
        this.show(event);
    };
    /**
     * <zh/> 点击画布/触发拖拽/出现上下文菜单隐藏tooltip
     *
     * <en/> Hide tooltip when clicking canvas/triggering drag/appearing context menu
     * @param event - <zh/> 目标元素 | <en/> target element
     */
    onPointerLeave = (event) => {
        this.hide(event);
        this.currentTarget = null;
    };
    /**
     * <zh/> 移动画布
     *
     * <en/> Move canvas
     * @param event - <zh/> 目标元素 | <en/> target element
     */
    onCanvasMove = (event) => {
        this.hide(event);
        this.currentTarget = null;
    };
    onPointerEnter = (event) => {
        this.show(event);
    };
    /**
     * <zh/> 显示目标元素的提示框
     *
     * <en/> Show tooltip of target element
     * @param id - <zh/> 元素 ID | <en/> element ID
     */
    showById = (id) => {
        const event = {
            target: { id },
        };
        this.show(event);
    };
    getElementData = (id, targetType) => {
        const { model } = this.context;
        switch (targetType) {
            case 'node':
                return model.getNodeData([id]);
            case 'edge':
                return model.getEdgeData([id]);
            case 'combo':
                return model.getComboData([id]);
            default:
                return [];
        }
    };
    /**
     * <zh/> 在目标元素上显示tooltip
     *
     * <en/> Show tooltip on target element
     * @param event - <zh/> 目标元素 | <en/> target element
     * @internal
     */
    show = (event) => {
        const { client, target: { id }, } = event;
        const targetType = this.context.graph.getElementType(id);
        if (!this.tooltipElement || !this.isEnable(event))
            return;
        const { getContent, title } = this.options;
        this.currentTarget = id;
        const items = this.getElementData(id, targetType);
        let x;
        let y;
        if (client) {
            x = client.x;
            y = client.y;
        }
        else {
            const style = get(items, '0.style', { x: 0, y: 0 });
            x = style.x;
            y = style.y;
        }
        let tooltipContent = {};
        if (getContent) {
            tooltipContent.content = getContent(event, items);
        }
        else {
            const style = this.context.graph.getElementRenderStyle(id);
            const color = targetType === 'node' ? style.fill : style.stroke;
            tooltipContent = {
                title: title || targetType,
                data: items.map((item) => {
                    return {
                        name: 'ID',
                        value: item.id || `${item.source} -> ${item.target}`,
                        color,
                    };
                }),
            };
        }
        this.tooltipElement.update({
            x,
            y,
            style: {
                '.tooltip': {
                    visibility: 'visible',
                },
            },
            ...tooltipContent,
        });
    };
    /**
     * <zh/> 隐藏tooltip
     *
     * <en/> Hidden tooltip
     * @param event - <zh/> 目标元素,不传则为外部调用 | <en/> Target element, not passed in as external call
     */
    hide = (event) => {
        // if e is undefined, hide the tooltip， external call
        if (!event) {
            this.tooltipElement?.hide();
            return;
        }
        if (!this.tooltipElement || !this.isEnable(event))
            return;
        const { client: { x, y }, } = event;
        this.tooltipElement.hide(x, y);
    };
    initTooltip = () => {
        const { canvas } = this.context;
        const { center } = canvas.getBounds();
        const $container = canvas.getContainer();
        const { top, left } = $container.getBoundingClientRect();
        const { style, position, enterable, container = { x: -left, y: -top }, title, offset } = this.options;
        const [x, y] = center;
        const [width, height] = canvas.getSize();
        const tooltipElement = new TooltipComponent({
            className: 'tooltip',
            style: {
                x,
                y,
                container,
                title,
                bounding: {
                    x: 0,
                    y: 0,
                    width,
                    height,
                },
                position,
                enterable,
                offset,
                style,
            },
        });
        this.container?.appendChild(tooltipElement.HTMLTooltipElement);
        return tooltipElement;
    };
    /**
     * <zh/> 销毁tooltip
     *
     * <en/> Destroy tooltip
     */
    destroy() {
        this.unbindEvents();
        if (this.tooltipElement) {
            this.container?.removeChild(this.tooltipElement.HTMLTooltipElement);
        }
        super.destroy();
    }
}
//# sourceMappingURL=tooltip.js.map