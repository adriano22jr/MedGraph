import { GraphEvent } from '../constants';
import { createPluginContainer, insertBefore } from '../utils/dom';
import { add, mod } from '../utils/vector';
import { BasePlugin } from './base-plugin';
/**
 * <zh/> 网格线
 *
 * <en/> Grid line
 * @remarks
 * <zh/> 网格线插件，多用于辅助绘图
 *
 * <en/> Grid line plugin, often used to auxiliary drawing
 */
export class GridLine extends BasePlugin {
    static defaultOptions = {
        border: true,
        borderLineWidth: 1,
        borderStroke: '#eee',
        borderStyle: 'solid',
        lineWidth: 1,
        size: 20,
        stroke: '#eee',
    };
    $element = createPluginContainer('grid-line');
    offset = [0, 0];
    constructor(context, options) {
        super(context, Object.assign({}, GridLine.defaultOptions, options));
        const $container = this.context.canvas.getContainer();
        insertBefore($container, this.$element);
        this.updateStyle();
        this.bindEvents();
    }
    /**
     * <zh/> 更新网格线配置
     *
     * <en/> Update the configuration of the grid line
     * @param options - <zh/> 配置项 | <en/> options
     * @internal
     */
    update(options) {
        super.update(options);
        this.updateStyle();
    }
    bindEvents() {
        const { graph } = this.context;
        graph.on(GraphEvent.AFTER_TRANSFORM, this.onTransform);
    }
    updateStyle() {
        const { size, stroke, lineWidth, border, borderLineWidth, borderStroke, borderStyle } = this.options;
        Object.assign(this.$element.style, {
            border: border ? `${borderLineWidth}px ${borderStyle} ${borderStroke}` : 'none',
            backgroundImage: `linear-gradient(${stroke} ${lineWidth}px, transparent ${lineWidth}px), linear-gradient(90deg, ${stroke} ${lineWidth}px, transparent ${lineWidth}px)`,
            backgroundSize: `${size}px ${size}px`,
        });
    }
    updateOffset(delta) {
        this.offset = mod(add(this.offset, delta), this.options.size);
        this.$element.style.backgroundPosition = `${this.offset[0]}px ${this.offset[1]}px`;
    }
    onTransform = (event) => {
        if (!this.options.follow)
            return;
        const { data: { translate }, } = event;
        if (translate)
            this.updateOffset(translate);
    };
    /**
     * <zh/> 销毁网格线
     *
     * <en/> Destroy the grid line
     */
    destroy() {
        this.context.graph.off(GraphEvent.AFTER_TRANSFORM, this.onTransform);
        this.$element.remove();
        super.destroy();
    }
}
//# sourceMappingURL=grid-line.js.map