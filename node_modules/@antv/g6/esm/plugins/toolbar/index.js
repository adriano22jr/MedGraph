import { createPluginContainer, insertDOM } from '../../utils/dom';
import { BasePlugin } from '../base-plugin';
import { BUILD_IN_SVG_ICON, TOOLBAR_CSS, parsePositionToStyle } from './util';
/**
 * <zh/> 工具栏，支持配置工具栏项目，以及点击之后的回调方法
 *
 * <en/> Toolbar, support configuration of toolbar items, and callback methods after clicking
 */
export class Toolbar extends BasePlugin {
    static defaultOptions = {
        position: 'top-left',
    };
    $element = createPluginContainer('toolbar', false);
    constructor(context, options) {
        super(context, Object.assign({}, Toolbar.defaultOptions, options));
        const $container = this.context.canvas.getContainer();
        this.$element.style.display = 'flex';
        $container.appendChild(this.$element);
        // 设置样式
        insertDOM('g6-toolbar-css', 'style', {}, TOOLBAR_CSS, document.head);
        insertDOM('g6-toolbar-svgicon', 'div', { display: 'none' }, BUILD_IN_SVG_ICON);
        this.$element.addEventListener('click', this.onToolbarItemClick);
        this.update(options);
    }
    /**
     * <zh/> 更新工具栏的配置项
     *
     * <en/> Update the configuration of the toolbar
     * @param options - <zh/> 工具栏的配置项 | <en/> The options of the toolbar
     * @internal
     */
    async update(options) {
        super.update(options);
        const { className, position, style } = this.options;
        this.$element.className = `g6-toolbar ${className || ''}`;
        // 设置容器的样式，主要是位置，背景之类的
        Object.assign(this.$element.style, style, parsePositionToStyle(position));
        this.$element.innerHTML = await this.getDOMContent();
    }
    /**
     * <zh/> 销毁工具栏
     *
     * <en/> Destroy the toolbar
     */
    destroy() {
        this.$element.removeEventListener('click', this.onToolbarItemClick);
        this.$element.remove();
        super.destroy();
    }
    async getDOMContent() {
        const items = await this.options.getItems();
        return items
            .map((item) => `
          <div class="g6-toolbar-item" value="${item.value}">
            <svg aria-hidden="true" focusable="false">
              <use xlink:href="#${item.id}"></use>
            </svg>
          </div>`)
            .join('');
    }
    onToolbarItemClick = (e) => {
        const { onClick } = this.options;
        if (e.target instanceof Element) {
            if (e.target.className.includes('g6-toolbar-item')) {
                const v = e.target.getAttribute('value');
                onClick?.(v, e.target);
            }
        }
    };
}
//# sourceMappingURL=index.js.map