import { createPluginContainer } from '../../utils/dom';
import { BasePlugin } from '../base-plugin';
import { getImageWatermark, getTextWatermark } from './util';
/**
 * <zh/> 水印
 *
 * <en/> Watermark
 * @remarks
 * <zh/> 支持使用文本和图片作为水印，实现原理是在 Graph 容器的 div 上加上 `background-image` 属性，然后就可以通过 css 来控制水印的位置和样式。对于文本，会使用隐藏 canvas 转成图片的方式来实现
 *
 * <en/> Support using text and image as watermark, the principle is to add the `background-image` property to the div of the Graph container, and then you can control the position and style of the watermark through css. For text, it will be converted to an image using a hidden canvas
 */
export class Watermark extends BasePlugin {
    static defaultOptions = {
        width: 200,
        height: 100,
        opacity: 0.2,
        rotate: Math.PI / 12,
        text: '',
        textFill: '#000',
        textFontSize: 16,
        textAlign: 'center',
        textBaseline: 'middle',
        backgroundRepeat: 'repeat',
    };
    $element = createPluginContainer('watermark');
    constructor(context, options) {
        super(context, Object.assign({}, Watermark.defaultOptions, options));
        const $container = this.context.canvas.getContainer();
        $container.appendChild(this.$element);
        this.update(options);
    }
    /**
     * <zh/> 更新水印配置
     *
     * <en/> Update the watermark configuration
     * @param options - <zh/> 配置项 | <en/> Options
     * @internal
     */
    async update(options) {
        super.update(options);
        const { width, height, text, imageURL, ...rest } = this.options;
        // Set the background style.
        Object.keys(rest).forEach((key) => {
            if (key.startsWith('background')) {
                // @ts-expect-error ignore
                this.$element.style[key] = options[key];
            }
        });
        // Set the background image
        const base64 = imageURL
            ? await getImageWatermark(width, height, imageURL, rest)
            : await getTextWatermark(width, height, text, rest);
        this.$element.style.backgroundImage = `url(${base64})`;
    }
    /**
     * <zh/> 销毁水印
     *
     * <en/> Destroy the watermark
     */
    destroy() {
        super.destroy();
        // Remove the background dom.
        this.$element.remove();
    }
}
//# sourceMappingURL=index.js.map