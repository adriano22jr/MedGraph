import { Rect } from '@antv/g';
import { isFunction } from '@antv/util';
import { COMBO_KEY, CanvasEvent, ComboEvent, CommonEvent } from '../constants';
import { getBBoxSize, getCombinedBBox } from '../utils/bbox';
import { idOf } from '../utils/id';
import { subStyleProps } from '../utils/prefix';
import { divide, subtract } from '../utils/vector';
import { BaseBehavior } from './base-behavior';
/**
 * <zh/> 拖拽元素交互
 *
 * <en/> Drag element behavior
 */
export class DragElement extends BaseBehavior {
    static defaultOptions = {
        animation: true,
        enable: (event) => ['node', 'combo'].includes(event.targetType),
        dropEffect: 'move',
        state: 'selected',
        hideEdge: 'none',
        shadow: false,
        shadowZIndex: 100,
        shadowFill: '#F3F9FF',
        shadowFillOpacity: 0.5,
        shadowStroke: '#1890FF',
        shadowStrokeOpacity: 0.9,
        shadowLineDash: [5, 5],
        cursor: {
            default: 'default',
            grab: 'grab',
            grabbing: 'grabbing',
        },
    };
    enable = false;
    enableElements = ['node', 'combo'];
    target = [];
    shadow;
    shadowOrigin = [0, 0];
    hiddenEdges = [];
    isDragging = false;
    get animation() {
        if (!this.options.shadow)
            return false;
        return this.options.animation;
    }
    constructor(context, options) {
        super(context, Object.assign({}, DragElement.defaultOptions, options));
        this.onDragStart = this.onDragStart.bind(this);
        this.onDrag = this.onDrag.bind(this);
        this.onDragEnd = this.onDragEnd.bind(this);
        this.onDrop = this.onDrop.bind(this);
        this.bindEvents();
    }
    /**
     * <zh/> 更新元素拖拽配置
     *
     * <en/> Update the element dragging configuration
     * @param options - <zh/> 配置项 | <en/> options
     * @internal
     */
    update(options) {
        this.unbindEvents();
        super.update(options);
        this.bindEvents();
    }
    bindEvents() {
        const { graph } = this.context;
        this.enableElements.forEach((type) => {
            graph.on(`${type}:${CommonEvent.DRAG_START}`, this.onDragStart);
            graph.on(`${type}:${CommonEvent.DRAG}`, this.onDrag);
            graph.on(`${type}:${CommonEvent.DRAG_END}`, this.onDragEnd);
            graph.on(`${type}:${CommonEvent.POINTER_ENTER}`, this.setCursor);
            graph.on(`${type}:${CommonEvent.POINTER_LEAVE}`, this.setCursor);
        });
        if (['link'].includes(this.options.dropEffect)) {
            graph.on(ComboEvent.DROP, this.onDrop);
            graph.on(CanvasEvent.DROP, this.onDrop);
        }
    }
    /**
     * <zh/> 获取当前选中的节点 id 集合
     *
     * <en/> Get the id collection of the currently selected node
     * @param currTarget - <zh/> 当前拖拽目标元素 id 集合 | <en/> The id collection of the current drag target element
     * @returns <zh/> 当前选中的节点 id 集合 | <en/> The id collection of the currently selected node
     * @internal
     */
    getSelectedNodeIDs(currTarget) {
        return Array.from(new Set(this.context.graph
            .getElementDataByState('node', this.options.state)
            .map((node) => node.id)
            .concat(currTarget)));
    }
    /**
     * Get the delta of the drag
     * @param event - drag event object
     * @returns delta
     * @internal
     */
    getDelta(event) {
        const zoom = this.context.graph.getZoom();
        return divide([event.dx, event.dy], zoom);
    }
    /**
     * <zh/> 拖拽开始时的回调
     *
     * <en/> Callback when dragging starts
     * @param event - <zh/> 拖拽事件对象 | <en/> drag event object
     * @internal
     */
    onDragStart(event) {
        this.enable = this.validate(event);
        if (!this.enable)
            return;
        const { batch, canvas } = this.context;
        canvas.setCursor(this.options.cursor?.grabbing || 'grabbing');
        this.isDragging = true;
        batch.startBatch();
        this.target = this.getSelectedNodeIDs([event.target.id]);
        this.hideEdge();
        this.context.graph.frontElement(this.target);
        if (this.options.shadow)
            this.createShadow(this.target);
    }
    /**
     * <zh/> 拖拽过程中的回调
     *
     * <en/> Callback when dragging
     * @param event - <zh/> 拖拽事件对象 | <en/> drag event object
     * @internal
     */
    onDrag(event) {
        if (!this.enable)
            return;
        const delta = this.getDelta(event);
        if (this.options.shadow)
            this.moveShadow(delta);
        else
            this.moveElement(this.target, delta);
    }
    /**
     * <zh/> 元素拖拽结束的回调
     *
     * <en/> Callback when dragging ends
     * @internal
     */
    onDragEnd() {
        this.enable = false;
        if (this.options.shadow) {
            if (!this.shadow)
                return;
            this.shadow.style.visibility = 'hidden';
            const { x = 0, y = 0 } = this.shadow.attributes;
            const [dx, dy] = subtract([+x, +y], this.shadowOrigin);
            this.moveElement(this.target, [dx, dy]);
        }
        this.showEdges();
        this.options.onFinish?.(this.target);
        const { batch, canvas } = this.context;
        batch.endBatch();
        canvas.setCursor(this.options.cursor?.grab || 'grab');
        this.isDragging = false;
        this.target = [];
    }
    /**
     * <zh/> 拖拽放下的回调
     *
     * <en/> Callback when dragging is released
     * @param event - <zh/> 拖拽事件对象 | <en/> drag event object
     */
    onDrop = async (event) => {
        if (this.options.dropEffect !== 'link')
            return;
        const { model, element } = this.context;
        const modifiedParentId = event.target.id;
        this.target.forEach((id) => {
            const originalParent = model.getParentData(id, COMBO_KEY);
            // 如果是在原父 combo 内部拖拽，需要刷新 combo 数据
            // If it is a drag and drop within the original parent combo, you need to refresh the combo data
            if (originalParent && idOf(originalParent) === modifiedParentId) {
                model.refreshComboData(modifiedParentId);
            }
            model.setParent(id, modifiedParentId, COMBO_KEY);
        });
        await element?.draw({ animation: true })?.finished;
    };
    setCursor = (event) => {
        if (this.isDragging)
            return;
        const { type } = event;
        const { canvas } = this.context;
        const { cursor } = this.options;
        if (type === CommonEvent.POINTER_ENTER)
            canvas.setCursor(cursor?.grab || 'grab');
        else
            canvas.setCursor(cursor?.default || 'default');
    };
    /**
     * <zh/> 验证元素是否允许拖拽
     *
     * <en/> Verify if the element is allowed to be dragged
     * @param event - <zh/> 拖拽事件对象 | <en/> drag event object
     * @returns <zh/> 是否允许拖拽 | <en/> Whether to allow dragging
     * @internal
     */
    validate(event) {
        if (this.destroyed)
            return false;
        const { enable } = this.options;
        if (isFunction(enable))
            return enable(event);
        return !!enable;
    }
    /**
     * <zh/> 移动元素
     *
     * <en/> Move the element
     * @param ids - <zh/> 元素 id 集合 | <en/> element id collection
     * @param offset <zh/> 偏移量 | <en/> offset
     * @internal
     */
    async moveElement(ids, offset) {
        const { model, element } = this.context;
        const { dropEffect } = this.options;
        ids.forEach((id) => {
            const elementType = model.getElementType(id);
            if (elementType === 'node')
                model.translateNodeBy(id, offset);
            else if (elementType === 'combo')
                model.translateComboBy(id, offset);
        });
        if (dropEffect === 'move')
            ids.forEach((id) => model.refreshComboData(id));
        await element.draw({ animation: this.animation })?.finished;
    }
    moveShadow(offset) {
        if (!this.shadow)
            return;
        const { x = 0, y = 0 } = this.shadow.attributes;
        const [dx, dy] = offset;
        this.shadow.attr({ x: +x + dx, y: +y + dy });
    }
    createShadow(target) {
        const shadowStyle = subStyleProps(this.options, 'shadow');
        const bbox = getCombinedBBox(target.map((id) => this.context.element.getElement(id).getBounds()));
        const [x, y] = bbox.min;
        this.shadowOrigin = [x, y];
        const [width, height] = getBBoxSize(bbox);
        const positionStyle = { width, height, x, y };
        if (this.shadow) {
            this.shadow.attr({
                ...shadowStyle,
                ...positionStyle,
                visibility: 'visible',
            });
        }
        else {
            this.shadow = new Rect({
                style: {
                    ...shadowStyle,
                    ...positionStyle,
                    pointerEvents: 'none',
                    // @ts-expect-error $layer is not in the type definition
                    $layer: 'transient',
                },
            });
            this.context.canvas.appendChild(this.shadow);
        }
    }
    showEdges() {
        if (this.options.shadow || this.hiddenEdges.length === 0)
            return;
        this.context.graph.showElement(this.hiddenEdges);
        this.hiddenEdges = [];
    }
    /**
     * Hide the edge
     * @internal
     */
    hideEdge() {
        const { hideEdge, shadow } = this.options;
        if (hideEdge === 'none' || shadow)
            return;
        const { graph } = this.context;
        if (hideEdge === 'all')
            this.hiddenEdges = graph.getEdgeData().map(idOf);
        else {
            this.hiddenEdges = Array.from(new Set(this.target.map((id) => graph.getRelatedEdgesData(id, hideEdge).map(idOf)).flat()));
        }
        graph.hideElement(this.hiddenEdges);
    }
    unbindEvents() {
        const { graph } = this.context;
        this.enableElements.forEach((type) => {
            graph.off(`${type}:${CommonEvent.DRAG_START}`, this.onDragStart);
            graph.off(`${type}:${CommonEvent.DRAG}`, this.onDrag);
            graph.off(`${type}:${CommonEvent.DRAG_END}`, this.onDragEnd);
            graph.off(`${type}:${CommonEvent.POINTER_ENTER}`, this.setCursor);
            graph.off(`${type}:${CommonEvent.POINTER_LEAVE}`, this.setCursor);
        });
        graph.off(`combo:${CommonEvent.DROP}`, this.onDrop);
        graph.off(`canvas:${CommonEvent.DROP}`, this.onDrop);
    }
    destroy() {
        this.unbindEvents();
        this.shadow?.destroy();
        super.destroy();
    }
}
//# sourceMappingURL=drag-element.js.map