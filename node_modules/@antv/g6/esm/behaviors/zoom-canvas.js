import { clamp, isArray, isFunction, isObject } from '@antv/util';
import { CommonEvent } from '../constants';
import { parsePoint } from '../utils/point';
import { Shortcut } from '../utils/shortcut';
import { BaseBehavior } from './base-behavior';
/**
 * <zh/> 缩放画布交互
 *
 * <en/> Zoom canvas behavior
 */
export class ZoomCanvas extends BaseBehavior {
    static defaultOptions = {
        animation: { duration: 200 },
        enable: true,
        sensitivity: 1,
        trigger: [],
    };
    shortcut;
    constructor(context, options) {
        super(context, Object.assign({}, ZoomCanvas.defaultOptions, options));
        this.shortcut = new Shortcut(context.graph);
        this.bindEvents();
    }
    /**
     * <zh/> 更新配置
     *
     * <en/> Update options
     * @param options - <zh/> 配置项 | <en/> Options
     * @internal
     */
    update(options) {
        super.update(options);
        this.bindEvents();
    }
    bindEvents() {
        const { trigger } = this.options;
        this.shortcut.unbindAll();
        if (isArray(trigger)) {
            this.preventDefault(CommonEvent.WHEEL);
            this.shortcut.bind([...trigger, CommonEvent.WHEEL], (event) => {
                const { deltaX, deltaY } = event;
                this.zoom(-(deltaY ?? deltaX), event, false);
            });
        }
        if (isObject(trigger)) {
            const { zoomIn = [], zoomOut = [], reset = [], } = trigger;
            this.shortcut.bind(zoomIn, (event) => this.zoom(10, event, this.options.animation));
            this.shortcut.bind(zoomOut, (event) => this.zoom(-10, event, this.options.animation));
            this.shortcut.bind(reset, this.onReset);
        }
    }
    /**
     * <zh/> 缩放画布
     *
     * <en/> Zoom canvas
     * @param value - <zh/> 缩放值， > 0 放大， < 0 缩小 | <en/> Zoom value, > 0 zoom in, < 0 zoom out
     * @param event - <zh/> 事件对象 | <en/> Event object
     * @param animation - <zh/> 缩放动画配置 | <en/> Zoom animation configuration
     */
    zoom = async (value, event, animation) => {
        if (!this.validate(event))
            return;
        const { graph } = this.context;
        let origin;
        if ('viewport' in event) {
            origin = parsePoint(event.viewport);
        }
        const { sensitivity, onFinish } = this.options;
        const ratio = 1 + (clamp(value, -50, 50) * sensitivity) / 100;
        const zoom = graph.getZoom();
        await graph.zoomTo(zoom * ratio, animation, origin);
        onFinish?.();
    };
    onReset = async () => {
        await this.context.graph.zoomTo(1, this.options.animation);
    };
    /**
     * <zh/> 验证是否可以缩放
     *
     * <en/> Verify whether it can be zoomed
     * @param event - <zh/> 事件对象 | <en/> Event object
     * @returns <zh/> 是否可以缩放 | <en/> Whether it can be zoomed
     * @internal
     */
    validate(event) {
        if (this.destroyed)
            return false;
        const { enable } = this.options;
        if (isFunction(enable))
            return enable(event);
        return !!enable;
    }
    preventDefault(eventName) {
        const listener = (e) => e.preventDefault();
        const container = this.context.canvas.getContainer();
        if (!container)
            return;
        container.addEventListener(eventName, listener);
    }
    /**
     * <zh/> 销毁缩放画布
     *
     * <en/> Destroy zoom canvas
     */
    destroy() {
        this.shortcut.destroy();
        super.destroy();
    }
}
//# sourceMappingURL=zoom-canvas.js.map