import type { Graph, Layout, LayoutMapping, MDSLayoutOptions } from './types';
/**
 * Layout arranging the nodes with multiple dimensional scaling algorithm
 *
 * @example
 * // Assign layout options when initialization.
 * const layout = new MDSLayout({ center: [100, 100] });
 * const positions = await layout.execute(graph); // { nodes: [], edges: [] }
 *
 * // Or use different options later.
 * const layout = new MDSLayout({ center: [100, 100] });
 * const positions = await layout.execute(graph, { rows: 20 }); // { nodes: [], edges: [] }
 *
 * // If you want to assign the positions directly to the nodes, use assign method.
 * await layout.assign(graph, { center: [100, 100] });
 */
export declare class MDSLayout implements Layout<MDSLayoutOptions> {
    options: MDSLayoutOptions;
    id: string;
    constructor(options?: MDSLayoutOptions);
    /**
     * Return the positions of nodes and edges(if needed).
     */
    execute(graph: Graph, options?: MDSLayoutOptions): Promise<LayoutMapping>;
    /**
     * To directly assign the positions to the nodes.
     */
    assign(graph: Graph, options?: MDSLayoutOptions): Promise<void>;
    private genericMDSLayout;
}
