import type { Graph, Layout, LayoutMapping, RadialLayoutOptions } from '../types';
/**
 * Layout arranging the nodes' on a radial shape
 *
 * @example
 * // Assign layout options when initialization.
 * const layout = new RadialLayout({ focusNode: 'node0' });
 * const positions = await layout.execute(graph); // { nodes: [], edges: [] }
 *
 * // Or use different options later.
 * const layout = new RadialLayout({ focusNode: 'node0' });
 * const positions = await layout.execute(graph, { focusNode: 'node0' }); // { nodes: [], edges: [] }
 *
 * // If you want to assign the positions directly to the nodes, use assign method.
 * await layout.assign(graph, { focusNode: 'node0' });
 */
export declare class RadialLayout implements Layout<RadialLayoutOptions> {
    options: RadialLayoutOptions;
    id: string;
    constructor(options?: RadialLayoutOptions);
    /**
     * Return the positions of nodes and edges(if needed).
     */
    execute(graph: Graph, options?: RadialLayoutOptions): Promise<LayoutMapping>;
    /**
     * To directly assign the positions to the nodes.
     */
    assign(graph: Graph, options?: RadialLayoutOptions): Promise<void>;
    private genericRadialLayout;
    private run;
    private oneIteration;
}
