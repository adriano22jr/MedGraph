import type { ComboCombinedLayoutOptions, Graph, Layout, LayoutMapping } from './types';
/**
 * Layout arranging the nodes and combos with combination of inner and outer layouts.
 *
 * @example
 * // Assign layout options when initialization.
 * const layout = new ComboCombinedLayout({});
 * const positions = await layout.execute(graph); // { nodes: [], edges: [] }
 *
 * // Or use different options later.
 * const layout = new ComboCombinedLayout({ radius: 10 });
 * const positions = await layout.execute(graph, { radius: 20 }); // { nodes: [], edges: [] }
 *
 * // If you want to assign the positions directly to the nodes, use assign method.
 * await layout.assign(graph, { radius: 20 });
 */
export declare class ComboCombinedLayout implements Layout<ComboCombinedLayoutOptions> {
    options: ComboCombinedLayoutOptions;
    id: string;
    constructor(options?: ComboCombinedLayoutOptions);
    /**
     * Return the positions of nodes and edges(if needed).
     */
    execute(graph: Graph, options?: ComboCombinedLayoutOptions): Promise<LayoutMapping>;
    /**
     * To directly assign the positions to the nodes.
     */
    assign(graph: Graph, options?: ComboCombinedLayoutOptions): Promise<void>;
    private genericComboCombinedLayout;
    private initVals;
    private getInnerGraphs;
}
