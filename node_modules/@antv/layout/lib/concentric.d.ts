import type { ConcentricLayoutOptions, Graph, Layout, LayoutMapping } from './types';
/**
 * Layout arranging the nodes in concentrics
 *
 * @example
 * // Assign layout options when initialization.
 * const layout = new ConcentricLayout({ nodeSpacing: 10 });
 * const positions = await layout.execute(graph); // { nodes: [], edges: [] }
 *
 * // Or use different options later.
 * const layout = new ConcentricLayout({ nodeSpacing: 10});
 * const positions = await layout.execute(graph, { nodeSpacing: 10 }); // { nodes: [], edges: [] }
 *
 * // If you want to assign the positions directly to the nodes, use assign method.
 * await layout.assign(graph, { nodeSpacing: 10 });
 */
export declare class ConcentricLayout implements Layout<ConcentricLayoutOptions> {
    options: ConcentricLayoutOptions;
    id: string;
    constructor(options?: ConcentricLayoutOptions);
    /**
     * Return the positions of nodes and edges(if needed).
     */
    execute(graph: Graph, options?: ConcentricLayoutOptions): Promise<LayoutMapping>;
    /**
     * To directly assign the positions to the nodes.
     */
    assign(graph: Graph, options?: ConcentricLayoutOptions): Promise<void>;
    private genericConcentricLayout;
}
