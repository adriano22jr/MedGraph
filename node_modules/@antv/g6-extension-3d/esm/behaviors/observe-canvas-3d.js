import { CameraType } from '@antv/g';
import { BaseBehavior, GraphEvent, Shortcut } from '@antv/g6';
/**
 * <zh/> 3D 场景控制器，提供缩放、平移、旋转等能力
 *
 * <en/> 3D scene controller, providing zoom, pan, rotate and other capabilities
 */
export class ObserveCanvas3D extends BaseBehavior {
    static defaultOptions = {
        enable: true,
        mode: 'orbiting',
        trigger: [],
    };
    shortcut;
    get camera() {
        return this.context.canvas.getCamera();
    }
    constructor(context, options) {
        super(context, { ...ObserveCanvas3D.defaultOptions, ...options });
        this.shortcut = new Shortcut(context.graph);
        this.bindEvents();
    }
    update(options) {
        super.update(options);
        this.setCameraType();
    }
    setCameraType = () => {
        const { mode } = this.options;
        const CameraModeMap = {
            orbiting: CameraType.ORBITING,
            exploring: CameraType.EXPLORING,
            tracking: CameraType.TRACKING,
        };
        this.camera.setType(CameraModeMap[mode]);
    };
    // tracking 模式下需要减速，否则容易出现抖动
    // Deceleration is required in tracking mode, otherwise jitter is easy to occur
    getRatio() {
        const { sensitivity, mode } = this.options;
        if (sensitivity)
            return sensitivity / 10;
        if (mode === 'tracking')
            return 0.1;
        return 1;
    }
    onDrag = (event) => {
        if (!this.options.enable)
            return;
        const { x, y } = event.movement;
        const ratio = this.getRatio();
        this.camera.rotate(x * ratio, -y * ratio, 0);
    };
    bindEvents() {
        const { graph } = this.context;
        graph.once(GraphEvent.BEFORE_DRAW, this.setCameraType);
        this.shortcut.unbindAll();
        this.shortcut.bind([...this.options.trigger, 'drag'], this.onDrag);
    }
    destroy() {
        this.shortcut.destroy();
        super.destroy();
    }
}
//# sourceMappingURL=observe-canvas-3d.js.map