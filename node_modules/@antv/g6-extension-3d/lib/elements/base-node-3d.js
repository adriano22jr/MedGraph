"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseNode3D = void 0;
const g_plugin_3d_1 = require("@antv/g-plugin-3d");
const g6_1 = require("@antv/g6");
const util_1 = require("@antv/util");
const material_1 = require("../utils/material");
class BaseNode3D extends g6_1.BaseNode {
    static defaultStyleProps = {
        materialType: 'basic',
    };
    type = 'node-3d';
    get plugin() {
        const renderer = this.attributes.context.canvas.renderers['main'];
        const plugin = renderer.getPlugin('device-renderer');
        return plugin;
    }
    get device() {
        return this.plugin.getDevice();
    }
    constructor(options) {
        super((0, util_1.deepMix)({}, { style: BaseNode3D.defaultStyleProps }, options));
    }
    render(attributes, container) {
        super.render(attributes, container);
    }
    getKeyStyle(attributes) {
        const style = (0, g6_1.omitStyleProps)(super.getKeyStyle(attributes), 'material');
        const geometry = this.getGeometry(attributes);
        const material = this.getMaterial(attributes);
        return { x: 0, y: 0, z: 0, ...style, geometry, material };
    }
    drawKeyShape(attributes, container = this) {
        return this.upsert('key', g_plugin_3d_1.Mesh, this.getKeyStyle(attributes), container);
    }
    getMaterial(attributes) {
        const { texture } = attributes;
        const materialStyle = (0, g6_1.subStyleProps)(attributes, 'material');
        return (0, material_1.createMaterial)(this.plugin, materialStyle, texture);
    }
}
exports.BaseNode3D = BaseNode3D;
//# sourceMappingURL=base-node-3d.js.map