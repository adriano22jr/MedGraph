"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Light = void 0;
const g_plugin_3d_1 = require("@antv/g-plugin-3d");
const g6_1 = require("@antv/g6");
const util_1 = require("@antv/util");
class Light extends g6_1.BasePlugin {
    static defaultOptions = {
        ambient: {
            fill: '#fff',
            intensity: Math.PI * 2,
        },
        directional: {
            fill: '#fff',
            direction: [-1, 0, 1],
            intensity: Math.PI * 0.7,
        },
    };
    ambient;
    directional;
    constructor(context, options) {
        super(context, (0, util_1.deepMix)({}, Light.defaultOptions, options));
        this.bindEvents();
    }
    bindEvents() {
        this.context.graph.on(g6_1.GraphEvent.BEFORE_DRAW, this.setLight);
    }
    unbindEvents() {
        this.context.graph.off(g6_1.GraphEvent.BEFORE_DRAW, this.setLight);
    }
    setLight = () => {
        const { ambient, directional } = this.options;
        this.upsertLight('directional', directional);
        this.upsertLight('ambient', ambient);
    };
    upsertLight(type, options) {
        if (options) {
            const light = this[type];
            if (light)
                light.attr(options);
            else {
                const Ctor = type === 'ambient' ? g_plugin_3d_1.AmbientLight : g_plugin_3d_1.DirectionalLight;
                const light = new Ctor({ style: options });
                this[type] = light;
                this.context.canvas.appendChild(light);
            }
        }
        else
            this[type]?.remove();
    }
    destroy() {
        this.unbindEvents();
        super.destroy();
    }
}
exports.Light = Light;
//# sourceMappingURL=light.js.map