import type { BaseStyleProps, DisplayObjectConfig, Group } from '@antv/g';
import type { ProceduralGeometry as GGeometry, Material as GMaterial } from '@antv/g-plugin-3d';
import type { IMaterial, Plugin } from '@antv/g-plugin-device-renderer';
import type { BaseNodeStyleProps, Prefix } from '@antv/g6';
import { BaseNode } from '@antv/g6';
import { Material } from '../types';
export interface BaseNode3DStyleProps extends BaseNodeStyleProps, Prefix<'material', IMaterial> {
    geometry?: GGeometry<any>;
    material?: GMaterial<any>;
    texture?: string | TexImageSource;
    materialType?: Material['type'];
}
export declare abstract class BaseNode3D<S extends BaseNode3DStyleProps> extends BaseNode<S> {
    static defaultStyleProps: Partial<BaseNode3DStyleProps>;
    type: string;
    protected get plugin(): Plugin;
    protected get device(): import("@antv/g-device-api").Device;
    constructor(options: DisplayObjectConfig<S>);
    render(attributes: Required<S>, container: Group): void;
    protected getKeyStyle(attributes: Required<S>): MeshStyleProps;
    protected drawKeyShape(attributes: Required<S>, container?: Group): any;
    protected abstract getGeometry(attributes: Required<S>): GGeometry<any> | undefined;
    protected getMaterial(attributes: Required<S>): GMaterial<any> | undefined;
}
export interface MeshStyleProps extends BaseStyleProps {
    x?: number | string;
    y?: number | string;
    z?: number | string;
    geometry?: GGeometry<any>;
    material?: GMaterial<any>;
}
